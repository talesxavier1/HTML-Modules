import { TDxInstanceType } from "Types/DxInstanceType";
import { TComponentName } from "Types/TComponentName";

interface IdxComponentValue {
    componentName: TComponentName,
    defaultValue: any,
    valueField: string | undefined | ((instance: any) => string)
}

const ListdxComponentValue: Array<IdxComponentValue> = [
    { componentName: "dxTextBox", defaultValue: "", valueField: "value" },
    { componentName: "dxSelectBox", defaultValue: null, valueField: "value" },
    { componentName: "dxCheckBox", defaultValue: false, valueField: "value" },
    { componentName: "dxNumberBox", defaultValue: 0, valueField: "value" },
    { componentName: "dxButton", defaultValue: undefined, valueField: undefined },
    { componentName: "dxContextMenu", defaultValue: undefined, valueField: undefined },
    { componentName: "dxDiagram", defaultValue: undefined, valueField: undefined },
    { componentName: "dxSplitter", defaultValue: undefined, valueField: undefined },
    { componentName: "dxList", defaultValue: [], valueField: "items" },
    { componentName: "dxTreeView", defaultValue: [], valueField: "items" },
    { componentName: "dxTabs", defaultValue: 0, valueField: "selectedItem" },
    { componentName: "dxTabPanel", defaultValue: 0, valueField: "selectedItem" },
    { componentName: "dxPopup", defaultValue: false, valueField: "visible" },
    { componentName: "dxLoadIndicator", defaultValue: true, valueField: "visible" },
    { componentName: "dxFileManager", defaultValue: undefined, valueField: (instance: DevExpress.ui.dxFileManager) => { return instance.getCurrentDirectory() } },
];

const TESTE_AAA = [{ "name": "docker-entrypoint.sh", "isDirectory": false, "__KEY__": "0bba0e3c-1365-6149-0426-df845aa85841", "size": 388, "dateModified": "2024-06-27T01:55:06.254Z", "content": "IyEvYmluL3NoCnNldCAtZQoKIyBSdW4gY29tbWFuZCB3aXRoIG5vZGUgaWYgdGhlIGZpcnN0IGFyZ3VtZW50IGNvbnRhaW5zIGEgIi0iIG9yIGlzIG5vdCBhIHN5c3RlbSBjb21tYW5kLiBUaGUgbGFzdAojIHBhcnQgaW5zaWRlIHRoZSAie30iIGlzIGEgd29ya2Fyb3VuZCBmb3IgdGhlIGZvbGxvd2luZyBidWcgaW4gYXNoL2Rhc2g6CiMgaHR0cHM6Ly9idWdzLmRlYmlhbi5vcmcvY2dpLWJpbi9idWdyZXBvcnQuY2dpP2J1Zz04NzQyNjQKaWYgWyAiJHsxIy19IiAhPSAiJHsxfSIgXSB8fCBbIC16ICIkKGNvbW1hbmQgLXYgIiR7MX0iKSIgXSB8fCB7IFsgLWYgIiR7MX0iIF0gJiYgISBbIC14ICIkezF9IiBdOyB9OyB0aGVuCiAgc2V0IC0tIG5vZGUgIiRAIgpmaQoKZXhlYyAiJEAiCg==" }, { "name": "Dockerfile", "isDirectory": false, "__KEY__": "db83a584-eb2b-2dcc-84e3-f36e9c3a8ea5", "size": 4845, "dateModified": "2024-06-27T02:11:55.924Z", "content": "RlJPTSBhbHBpbmU6My4xOQoKRU5WIE5PREVfVkVSU0lPTiAyMi4zLjAKCiNXT1JLRElSIC9GaW1BcHAKClJVTiBhZGRncm91cCAtZyAxMDAwIG5vZGUgXAogICAgJiYgYWRkdXNlciAtdSAxMDAwIC1HIG5vZGUgLXMgL2Jpbi9zaCAtRCBub2RlIFwKICAgICYmIGFwayBhZGQgLS1uby1jYWNoZSBcCiAgICBsaWJzdGRjKysgXAogICAgJiYgYXBrIGFkZCAtLW5vLWNhY2hlIC0tdmlydHVhbCAuYnVpbGQtZGVwcyBcCiAgICBjdXJsIFwKICAgICYmIEFSQ0g9IE9QRU5TU0xfQVJDSD0nbGludXgqJyAmJiBhbHBpbmVBcmNoPSIkKGFwayAtLXByaW50LWFyY2gpIiBcCiAgICAmJiBjYXNlICIke2FscGluZUFyY2gjIyotfSIgaW4gXAogICAgeDg2XzY0KSBBUkNIPSd4NjQnIENIRUNLU1VNPSJkZGIxNTQ4Y2U3NGM4ZmQ1NGM0N2ViZGEwZmE2NjkwMzIwODU0N2ZhZjRjZmJmODc0YjA4NmQ2ZGMzZDIyNDRkIiBPUEVOU1NMX0FSQ0g9bGludXgteDg2XzY0OzsgXAogICAgeDg2KSBPUEVOU1NMX0FSQ0g9bGludXgtZWxmOzsgXAogICAgYWFyY2g2NCkgT1BFTlNTTF9BUkNIPWxpbnV4LWFhcmNoNjQ7OyBcCiAgICBhcm0qKSBPUEVOU1NMX0FSQ0g9bGludXgtYXJtdjQ7OyBcCiAgICBwcGM2NGxlKSBPUEVOU1NMX0FSQ0g9bGludXgtcHBjNjRsZTs7IFwKICAgIHMzOTB4KSBPUEVOU1NMX0FSQ0g9bGludXgtczM5MHg7OyBcCiAgICAqKSA7OyBcCiAgICBlc2FjIFwKICAgICYmIGlmIFsgLW4gIiR7Q0hFQ0tTVU19IiBdOyB0aGVuIFwKICAgIHNldCAtZXU7IFwKICAgIGN1cmwgLWZzU0xPIC0tY29tcHJlc3NlZCAiaHR0cHM6Ly91bm9mZmljaWFsLWJ1aWxkcy5ub2RlanMub3JnL2Rvd25sb2FkL3JlbGVhc2UvdiROT0RFX1ZFUlNJT04vbm9kZS12JE5PREVfVkVSU0lPTi1saW51eC0kQVJDSC1tdXNsLnRhci54eiI7IFwKICAgIGVjaG8gIiRDSEVDS1NVTSAgbm9kZS12JE5PREVfVkVSU0lPTi1saW51eC0kQVJDSC1tdXNsLnRhci54eiIgfCBzaGEyNTZzdW0gLWMgLSBcCiAgICAmJiB0YXIgLXhKZiAibm9kZS12JE5PREVfVkVSU0lPTi1saW51eC0kQVJDSC1tdXNsLnRhci54eiIgLUMgL3Vzci9sb2NhbCAtLXN0cmlwLWNvbXBvbmVudHM9MSAtLW5vLXNhbWUtb3duZXIgXAogICAgJiYgbG4gLXMgL3Vzci9sb2NhbC9iaW4vbm9kZSAvdXNyL2xvY2FsL2Jpbi9ub2RlanM7IFwKICAgIGVsc2UgXAogICAgZWNobyAiQnVpbGRpbmcgZnJvbSBzb3VyY2UiIFwKICAgICMgYmFja3VwIGJ1aWxkCiAgICAmJiBhcGsgYWRkIC0tbm8tY2FjaGUgLS12aXJ0dWFsIC5idWlsZC1kZXBzLWZ1bGwgXAogICAgYmludXRpbHMtZ29sZCBcCiAgICBnKysgXAogICAgZ2NjIFwKICAgIGdudXBnIFwKICAgIGxpYmdjYyBcCiAgICBsaW51eC1oZWFkZXJzIFwKICAgIG1ha2UgXAogICAgcHl0aG9uMyBcCiAgICBweS1zZXR1cHRvb2xzIFwKICAgICMgdXNlIHByZS1leGlzdGluZyBncGcgZGlyZWN0b3J5LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9kb2NrZXItbm9kZS9wdWxsLzE4OTUjaXNzdWVjb21tZW50LTE1NTAzODkxNTAKICAgICYmIGV4cG9ydCBHTlVQR0hPTUU9IiQobWt0ZW1wIC1kKSIgXAogICAgIyBncGcga2V5cyBsaXN0ZWQgYXQgaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlI3JlbGVhc2Uta2V5cwogICAgJiYgZm9yIGtleSBpbiBcCiAgICA0RUQ3NzhGNTM5RTM2MzRDNzc5Qzg3QzZENzA2Mjg0OEExQUIwMDVDIFwKICAgIDE0MUYwNzU5NUI3QjNGRkU3NDMwOUE5Mzc0MDU1MzNCRTU3QzdENTcgXAogICAgNzRGMTI2MDJCNkYxQzRFOTEzRkFBMzdBRDNBODk2MTM2NDNCNjIwMSBcCiAgICBERDc5MkY1OTczQzZERTUyQzQzMkNCREFDNzdBQkZBMDBEREJGMkI3IFwKICAgIDYxRkM2ODFERkI5MkEwNzlGMTY4NUU3Nzk3M0YyOTU1OTRFQzQ2ODkgXAogICAgOEZDQ0ExM0ZFRjFEMEMyRTkxMDA4RTA5NzcwRjdBOUE1QUUxNTYwMCBcCiAgICBDNEYwREZGRjRFOEMxQTgyMzY0MDlEMDhFNzNCQzY0MUNDMTFGNEM4IFwKICAgIDg5MEMwOERCODU3OTE2MkZFRTBERjlEQjhCRUFCNERGQ0Y1NTVFRjQgXAogICAgQzgyRkEzQUUxQ0JFREM2QkU0NkI5MzYwQzQzQ0VDNDVDMTdBQjkzQyBcCiAgICAxMDhGNTJCNDhEQjU3QkIwQ0M0MzlCMjk5N0IwMTQxOUJEOTJGODBBIFwKICAgIEEzNjNBNDk5MjkxQ0JCQzk0MERENjJFNDFGMTAwMjdBRjAwMkY4QjAgXAogICAgQ0M2OEY1QTMxMDZGRjQ0ODMyMkU0OEVEMjdGNUUzOEQ1QjBBMjE1RiBcCiAgICA7IGRvIFwKICAgIGdwZyAtLWJhdGNoIC0ta2V5c2VydmVyIGhrcHM6Ly9rZXlzLm9wZW5wZ3Aub3JnIC0tcmVjdi1rZXlzICIka2V5IiB8fCBcCiAgICBncGcgLS1iYXRjaCAtLWtleXNlcnZlciBrZXlzZXJ2ZXIudWJ1bnR1LmNvbSAtLXJlY3Yta2V5cyAiJGtleSIgOyBcCiAgICBkb25lIFwKICAgICYmIGN1cmwgLWZzU0xPIC0tY29tcHJlc3NlZCAiaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvdiROT0RFX1ZFUlNJT04vbm9kZS12JE5PREVfVkVSU0lPTi50YXIueHoiIFwKICAgICYmIGN1cmwgLWZzU0xPIC0tY29tcHJlc3NlZCAiaHR0cHM6Ly9ub2RlanMub3JnL2Rpc3QvdiROT0RFX1ZFUlNJT04vU0hBU1VNUzI1Ni50eHQuYXNjIiBcCiAgICAmJiBncGcgLS1iYXRjaCAtLWRlY3J5cHQgLS1vdXRwdXQgU0hBU1VNUzI1Ni50eHQgU0hBU1VNUzI1Ni50eHQuYXNjIFwKICAgICYmIGdwZ2NvbmYgLS1raWxsIGFsbCBcCiAgICAmJiBybSAtcmYgIiRHTlVQR0hPTUUiIFwKICAgICYmIGdyZXAgIiBub2RlLXYkTk9ERV9WRVJTSU9OLnRhci54elwkIiBTSEFTVU1TMjU2LnR4dCB8IHNoYTI1NnN1bSAtYyAtIFwKICAgICYmIHRhciAteGYgIm5vZGUtdiROT0RFX1ZFUlNJT04udGFyLnh6IiBcCiAgICAmJiBjZCAibm9kZS12JE5PREVfVkVSU0lPTiIgXAogICAgJiYgLi9jb25maWd1cmUgXAogICAgJiYgbWFrZSAtaiQoZ2V0Y29uZiBfTlBST0NFU1NPUlNfT05MTikgVj0gXAogICAgJiYgbWFrZSBpbnN0YWxsIFwKICAgICYmIGFwayBkZWwgLmJ1aWxkLWRlcHMtZnVsbCBcCiAgICAmJiBjZCAuLiBcCiAgICAmJiBybSAtUmYgIm5vZGUtdiROT0RFX1ZFUlNJT04iIFwKICAgICYmIHJtICJub2RlLXYkTk9ERV9WRVJTSU9OLnRhci54eiIgU0hBU1VNUzI1Ni50eHQuYXNjIFNIQVNVTVMyNTYudHh0OyBcCiAgICBmaSBcCiAgICAmJiBybSAtZiAibm9kZS12JE5PREVfVkVSU0lPTi1saW51eC0kQVJDSC1tdXNsLnRhci54eiIgXAogICAgIyBSZW1vdmUgdW51c2VkIE9wZW5TU0wgaGVhZGVycyB0byBzYXZlIH4zNE1CLiBTZWUgdGhpcyBOb2RlSlMgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9pc3N1ZXMvNDY0NTEKICAgICYmIGZpbmQgL3Vzci9sb2NhbC9pbmNsdWRlL25vZGUvb3BlbnNzbC9hcmNocyAtbWluZGVwdGggMSAtbWF4ZGVwdGggMSAhIC1uYW1lICIkT1BFTlNTTF9BUkNIIiAtZXhlYyBybSAtcmYge30gXDsgXAogICAgJiYgYXBrIGRlbCAuYnVpbGQtZGVwcyBcCiAgICAjIHNtb2tlIHRlc3RzCiAgICAmJiBub2RlIC0tdmVyc2lvbiBcCiAgICAmJiBucG0gLS12ZXJzaW9uCgpFTlYgWUFSTl9WRVJTSU9OIDEuMjIuMjIKClJVTiBhcGsgYWRkIC0tbm8tY2FjaGUgLS12aXJ0dWFsIC5idWlsZC1kZXBzLXlhcm4gY3VybCBnbnVwZyB0YXIgXAogICAgIyB1c2UgcHJlLWV4aXN0aW5nIGdwZyBkaXJlY3RvcnksIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL2RvY2tlci1ub2RlL3B1bGwvMTg5NSNpc3N1ZWNvbW1lbnQtMTU1MDM4OTE1MAogICAgJiYgZXhwb3J0IEdOVVBHSE9NRT0iJChta3RlbXAgLWQpIiBcCiAgICAmJiBmb3Iga2V5IGluIFwKICAgIDZBMDEwQzUxNjYwMDY1OTlBQTE3RjA4MTQ2QzIxMzBERkQyNDk3RjUgXAogICAgOyBkbyBcCiAgICBncGcgLS1iYXRjaCAtLWtleXNlcnZlciBoa3BzOi8va2V5cy5vcGVucGdwLm9yZyAtLXJlY3Yta2V5cyAiJGtleSIgfHwgXAogICAgZ3BnIC0tYmF0Y2ggLS1rZXlzZXJ2ZXIga2V5c2VydmVyLnVidW50dS5jb20gLS1yZWN2LWtleXMgIiRrZXkiIDsgXAogICAgZG9uZSBcCiAgICAmJiBjdXJsIC1mc1NMTyAtLWNvbXByZXNzZWQgImh0dHBzOi8veWFybnBrZy5jb20vZG93bmxvYWRzLyRZQVJOX1ZFUlNJT04veWFybi12JFlBUk5fVkVSU0lPTi50YXIuZ3oiIFwKICAgICYmIGN1cmwgLWZzU0xPIC0tY29tcHJlc3NlZCAiaHR0cHM6Ly95YXJucGtnLmNvbS9kb3dubG9hZHMvJFlBUk5fVkVSU0lPTi95YXJuLXYkWUFSTl9WRVJTSU9OLnRhci5nei5hc2MiIFwKICAgICYmIGdwZyAtLWJhdGNoIC0tdmVyaWZ5IHlhcm4tdiRZQVJOX1ZFUlNJT04udGFyLmd6LmFzYyB5YXJuLXYkWUFSTl9WRVJTSU9OLnRhci5neiBcCiAgICAmJiBncGdjb25mIC0ta2lsbCBhbGwgXAogICAgJiYgcm0gLXJmICIkR05VUEdIT01FIiBcCiAgICAmJiBta2RpciAtcCAvb3B0IFwKICAgICYmIHRhciAteHpmIHlhcm4tdiRZQVJOX1ZFUlNJT04udGFyLmd6IC1DIC9vcHQvIFwKICAgICYmIGxuIC1zIC9vcHQveWFybi12JFlBUk5fVkVSU0lPTi9iaW4veWFybiAvdXNyL2xvY2FsL2Jpbi95YXJuIFwKICAgICYmIGxuIC1zIC9vcHQveWFybi12JFlBUk5fVkVSU0lPTi9iaW4veWFybnBrZyAvdXNyL2xvY2FsL2Jpbi95YXJucGtnIFwKICAgICYmIHJtIHlhcm4tdiRZQVJOX1ZFUlNJT04udGFyLmd6LmFzYyB5YXJuLXYkWUFSTl9WRVJTSU9OLnRhci5neiBcCiAgICAmJiBhcGsgZGVsIC5idWlsZC1kZXBzLXlhcm4gXAogICAgIyBzbW9rZSB0ZXN0CiAgICAmJiB5YXJuIC0tdmVyc2lvbiBcCiAgICAmJiBybSAtcmYgL3RtcC8qCgoKQ09QWSAuIC4KRU5UUllQT0lOVCBbIi4vZG9ja2VyLWVudHJ5cG9pbnQuc2giXQoKQ01EIFsibm9kZSIsICJpbmRleC5qcyJd" }, { "name": "index.js", "isDirectory": false, "__KEY__": "cdd30066-522a-7a96-5ab0-ce2746f1b388", "size": 235649, "dateModified": "2024-06-27T01:45:44.072Z", "content": "" }, { "name": "(API) DOCCOB.js", "isDirectory": false, "__KEY__": "a97e2a7f-6711-d231-7999-5b7750fd4f3d", "size": 24847, "dateModified": "2022-07-18T17:56:53.000Z", "content": "" }, { "name": "(API) Empresa.js", "isDirectory": false, "__KEY__": "e72622b5-94e5-0491-e0cd-78a943bab3db", "size": 47710, "dateModified": "2022-09-26T14:19:40.000Z", "content": "" }, { "name": "(API) Pessoa.js", "isDirectory": false, "__KEY__": "9a5985b6-1362-564b-5216-14e6eeae9e26", "size": 51231, "dateModified": "2022-09-26T14:50:17.000Z", "content": "" }, { "name": "(Carga) Tabela Preco.js", "isDirectory": false, "__KEY__": "ce5994bc-cece-cdc4-bfb7-08e882c64804", "size": 35752, "dateModified": "2022-07-05T17:48:24.000Z", "content": "" }, { "name": "(CIOT) - Cancelamento.js", "isDirectory": false, "__KEY__": "2249566a-3f22-9f62-14d6-ddf23daeb92a", "size": 8513, "dateModified": "2022-06-14T00:30:22.000Z", "content": "" }, { "name": "(CIOT) - Geração.js", "isDirectory": false, "__KEY__": "91314b5c-220e-2a85-528d-a28e5774699d", "size": 32292, "dateModified": "2022-06-17T13:58:27.000Z", "content": "" }, { "name": "(CIOT) - Proprietário-Veículo.js", "isDirectory": false, "__KEY__": "9f273ad6-9588-b446-2e76-a0496f4b877c", "size": 16780, "dateModified": "2022-06-12T22:42:11.000Z", "content": "" }, { "name": "(CTE) - Anulacão copy.js", "isDirectory": false, "__KEY__": "38932320-8e33-849b-3308-e59f3fc1d505", "size": 40067, "dateModified": "2022-06-28T23:16:30.000Z", "content": "" }, { "name": "(CTE) - Anulacão.js", "isDirectory": false, "__KEY__": "957e3bc6-0dd3-d543-c2ce-51e4d553a23b", "size": 45443, "dateModified": "2024-03-05T13:16:27.451Z", "content": "Y29uc3QgeyBKU0RPTSB9ID0gcmVxdWlyZSgianNkb20iKTsNCmNvbnN0IHsgd2luZG93IH0gPSBuZXcgSlNET00oIiIpOw0KY29uc3QgJCA9IHJlcXVpcmUoImpxdWVyeSIpKHdpbmRvdyk7DQpjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7DQoNCmNvbnN0IHsgZGF0ZSB9ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTsNCmNvbnN0IHsgdHlwZSB9ID0gcmVxdWlyZSgnb3MnKTsNCmNvbnN0IHsgZm9ybWF0RGF0ZSB9ID0gcmVxdWlyZSgndG91Z2gtY29va2llJyk7DQp2YXIgb25lcmd5ID0gcmVxdWlyZSgnQzovVXNlcnMvVGFsbGVzQW5kcmFkZS9Eb2N1bWVudHMvT25lcmd5IExvY2FsL29uZXJneS9vbmVyZ3ktY2xpZW50LmpzJyk7DQpjb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTsNCg0KcmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChjb250ZW50LCBuZWVkbGUsIHJlcGxhY2VtZW50KSB7DQogICAgcmV0dXJuIGNvbnRlbnQuc3BsaXQobmVlZGxlKS5qb2luKHJlcGxhY2VtZW50KTsNCn07DQoNCmFzeW5jIGZ1bmN0aW9uIFJlYWRFeGNlbFRvSnNvbihhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5SZWFkRXhjZWxUb0pzb24oYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIG9uZXJneV9nZXQoYXJncykgew0KICAgIHZhciByID0gYXdhaXQgb25lcmd5Lm9uZXJneV9nZXQoYXJncyk7DQogICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHIpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBoYXNoTWQ1KGFyZ3MpIHsNCiAgICByZXR1cm4gYXdhaXQgb25lcmd5Lmhhc2hNZDUoYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIG9uZXJneV9zYXZlKGFyZ3MpIHsNCiAgICByZXR1cm4gYXdhaXQgb25lcmd5Lm9uZXJneV9zYXZlKGFyZ3MpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlaWQsIHVzcmlkLCBhc3NpZCwgZGF0YSkgew0KICAgIGxldCBvbmVyZ3lTYXZlRGF0YSA9IHsNCiAgICAgICAgZmR0aWQ6IHRlbXBsYXRlaWQsDQogICAgICAgIGFzc2lkOiBhc3NpZCwNCiAgICAgICAgdXNyaWQ6IHVzcmlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKQ0KICAgIH0NCiAgICByZXR1cm4gYXdhaXQgb25lcmd5X3NhdmUob25lcmd5U2F2ZURhdGEpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBvbmVyZ3lfdXBkYXRlbWFueShhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5vbmVyZ3lfc2F2ZShhcmdzKTsNCn0NCg0KYXN5bmMgZnVuY3Rpb24gc2VuZG1haWwoYXJncykgew0KICAgIHJldHVybiBhd2FpdCBvbmVyZ3kuc2VuZG1haWwoYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIGluY3JlbWVudChhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5pbmNyZW1lbnQoYXJncyk7DQp9DQoNCmNsYXNzIE1lbW9yeSB7DQogICAgdmFsTWVtb3J5ID0gW107DQogICAgVHJ5QWRkKGtleSwgdmFsdWUsIHRpbWUpIHsNCiAgICAgICAgdmFyIGV4aXN0ID0gZmFsc2U7DQogICAgICAgIGZvciAobGV0IHMgaW4gdGhpcy52YWxNZW1vcnkpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLnZhbE1lbW9yeVtzXS5rZXkgPT0ga2V5KSB7DQogICAgICAgICAgICAgICAgZXhpc3QgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChleGlzdCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhpcy52YWxNZW1vcnkucHVzaCh7ICdrZXknOiBrZXksICd2YWx1ZSc6IHZhbHVlLCAndGltZSc6IHRpbWUgfSkNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIFJlbW92ZShrZXkpIHsNCg0KICAgIH0NCn0NCmxldCBtZW1vcnkgPSBuZXcgTWVtb3J5KCk7DQovKg0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gICBTQ1JJUFQgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCiovDQphc3luYyBmdW5jdGlvbiBpbml0KGpzb24pIHsNCiAgICB2YXIgZGF0YSA9IEpTT04ucGFyc2UoanNvbik7DQogICAgbGV0IHRlbXBsYXRlaWRDVGUgPSAiYmI1NTVhYTQtMjUzNi00YWMwLWE0OGItMGJmZjIzNGFhNzk5IjsNCiAgICBsZXQgQ2FyZFVuaWRhZGVFbWlzc2FvID0gIjIzOGFiZDhkLWNlMWItNGRjZS04MGNmLWJjN2RlZTkyZjhjZiI7DQogICAgbGV0IENhcmRFbmRlcmVjb1VuaWRhZGVFbWlzc2FvID0gIjhkZTg4NjkyLTA4MGYtNDRmZS05ZjBjLTI5YzhlYTUzN2Y0ZiI7DQoNCiAgICBsZXQgZmlsdHJvX2lkX2N0ZSA9IEpTT04uc3RyaW5naWZ5KFsNCiAgICAgICAgeyBGaWVsTmFtZTogIl9pZCIsIFR5cGU6ICJzdHJpbmciLCBGaXhlZFR5cGU6ICJzdHJpbmciLCBWYWx1ZTE6IGRhdGEuSURfT05FX1JFRiB9DQogICAgXSk7DQogICAgbGV0IG9iamN0ZSA9IGF3YWl0IGdldE9uZXJneUl0ZW0odGVtcGxhdGVpZENUZSwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIGZpbHRyb19pZF9jdGUpOw0KDQogICAgLy9VbmlkYWRlIGRlIEVtaXNzw6NvDQogICAgbGV0IEZpbHRyb1VuaWRhZGVFbWlzc2FvID0gSlNPTi5zdHJpbmdpZnkoWw0KICAgICAgICB7IEZpZWxOYW1lOiAiX2lkIiwgVHlwZTogInN0cmluZyIsIEZpeGVkVHlwZTogInN0cmluZyIsIFZhbHVlMTogb2JqY3RlWzBdLlVybEpzb25Db250ZXh0LkxFU1RBU0Z1bmlkYWRlX2RlX2VtaXNzYW9faWQgfQ0KICAgIF0pOw0KICAgIGxldCBPYmpVbmlkYWRlRW1pc3NhbyA9IGF3YWl0IGdldE9uZXJneUl0ZW0oQ2FyZFVuaWRhZGVFbWlzc2FvLCBkYXRhLm9uZXJneV9qc19jdHguYXNzaWQsIGRhdGEub25lcmd5X2pzX2N0eC51c3JpZCwgRmlsdHJvVW5pZGFkZUVtaXNzYW8pOw0KDQogICAgLy9FbmRlcmXDp28gZGEgVW5pZGFkZSBFbWlzc8Ojbw0KICAgIGxldCBGaWx0cm9FbmRlcmVjb1VuaWRhZGVFbWlzc2FvID0gSlNPTi5zdHJpbmdpZnkoWw0KICAgICAgICB7IEZpZWxOYW1lOiAiSURfT05FX1JFRiIsIFR5cGU6ICJzdHJpbmciLCBGaXhlZFR5cGU6ICJzdHJpbmciLCBWYWx1ZTE6IE9ialVuaWRhZGVFbWlzc2FvWzBdLklEIH0NCiAgICBdKTsNCiAgICBsZXQgT2JqRW5kZXJlY29VbmlkYWRlRW1pc3NhbyA9IGF3YWl0IGdldE9uZXJneUl0ZW0oQ2FyZEVuZGVyZWNvVW5pZGFkZUVtaXNzYW8sIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBGaWx0cm9FbmRlcmVjb1VuaWRhZGVFbWlzc2FvKTsNCg0KICAgIGlmIChvYmpjdGUgIT09IG51bGwpIHsNCiAgICAgICAgdmFyIHJlZ2lzdHJvQ1RlID0gb2JqY3RlWzBdLlVybEpzb25Db250ZXh0Ow0KICAgICAgICBsZXQgZXJybyA9IGZhbHNlOw0KICAgICAgICBsZXQgbG9nRXJybyA9ICcnOw0KICAgICAgICBpZiAocmVnaXN0cm9DVGUuc3RhdHVzX2N0ZV9jdGUgPT09ICJlbWl0aWRvIiAmJiByZWdpc3Ryb0NUZS5maW5hbGlkYWRlX2VtaXNzYW9fY3RlX2N0ZSA9PT0gIm5vcm1hbCIgJiYgZGF0YS5tb3Rpdm9fYW51bGFjYW9fY3RlICE9PSBudWxsICYmIGRhdGEubW90aXZvX2FudWxhY2FvX2N0ZSAhPT0gIiIpIHsNCiAgICAgICAgICAgIGxldCB0b2tlbk9iaiA9IGF3YWl0IFBlZ2FUb2tlbihyZWdpc3Ryb0NUZSk7DQogICAgICAgICAgICBpZiAodG9rZW5PYmoudG9rZW4gIT09IG51bGwgJiYgdG9rZW5PYmoudG9rZW4gIT09ICIiKSB7DQogICAgICAgICAgICAgICAgdmFyIGVudmlvYW51bGFjYW9jdGVPYmogPSBhd2FpdCBDcmlhT2JqZXRvQW51bGFjYW9DdGUocmVnaXN0cm9DVGUsIGRhdGEsIE9ialVuaWRhZGVFbWlzc2FvLCBPYmpFbmRlcmVjb1VuaWRhZGVFbWlzc2FvKTsNCiAgICAgICAgICAgICAgICBpZiAoZW52aW9hbnVsYWNhb2N0ZU9iaikgew0KICAgICAgICAgICAgICAgICAgICBsZXQgdXJsYW51bGFjYW8gPSAiaHR0cHM6Ly9hcGlrZWVwdHJ1ZWRmZS5henVyZXdlYnNpdGVzLm5ldC9hcGkvQ1RlL0FudWxhckNUZSI7DQogICAgICAgICAgICAgICAgICAgIGxldCByZXNwb3N0YU1lbnNhZ2VyaWEgPSBhd2FpdCBFZmV0dWFNZW5zYWdlcmlhKHJlZ2lzdHJvQ1RlLCBlbnZpb2FudWxhY2FvY3RlT2JqLCB0b2tlbk9iaiwgdXJsYW51bGFjYW8pOw0KDQogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb3N0YU1lbnNhZ2VyaWEuaGFzT3duUHJvcGVydHkoInN0YXR1cyIpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLnN0YXR1cyA9PSA0MDApIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkdGlkOiB0ZW1wbGF0ZWlkQ1RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZDogZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c3JpZDogZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVnaXN0cm9DVGUuZmVkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJVcmxKc29uQ29udGV4dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9nX2N0ZSc6IGBFcnJvIG5hIGV4ZWN1w6fDo286JHtKU09OLnN0cmluZ2lmeShyZXNwb3N0YU1lbnNhZ2VyaWEuZXJyb3JzKX1gDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9EZWl4YSBhIG51bWVyYcOnw6NvIGRpc3BvbsOtdmVsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iakNhbGxCYWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogJ05PSycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdEdXBsaWNpZGFkZSc6IGZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmV4dCc6IGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGJ1c2Nhck51bWVyYWNhbyhkYXRhLCBPYmpVbmlkYWRlRW1pc3Nhb1swXS5JRCwgdHJ1ZSwgb2JqQ2FsbEJhY2spOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTZXRPYmplY3RSZXNwb25zZSh0cnVlLCBkYXRhLCBmYWxzZSk7DQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhICE9PSBudWxsICYmIHJlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzICE9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLm9ianMucHJvdG9jb2xvQXV0b3JpemFjYW8gIT09ICIiICYmIHJlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLmNoYXZlQWNlc3NvQ1RlICE9PSAiIikgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRGVpeGEgYSBQcm94aW1hIE7Dum1lcmFjYW8gRGlzcG9uw612ZWwuDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iakNhbGxCYWNrID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogJ09LJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bWVybyc6IGVudmlvYW51bGFjYW9jdGVPYmouTnVtZXJvQ1RlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGJ1c2Nhck51bWVyYWNhbyhkYXRhLCBPYmpVbmlkYWRlRW1pc3Nhb1swXS5JRCwgdHJ1ZSwgb2JqQ2FsbEJhY2spOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdyYXZhIG8gRXZlbnRvIG5vIENUZSBBbnVsYWRvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgR3JhdmFFdmVudG8oZGF0YS5JRF9PTkVfUkVGLCAiQW51bGHDp8OjbyIsIHJlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLnByb3RvY29sb0F1dG9yaXphY2FvLCByZXNwb3N0YU1lbnNhZ2VyaWEub2Jqcy5jaGF2ZUFjZXNzb0NUZSwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQpDQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZ3JhdmFjdGVlbWl0aWRvID0gQ3JpYU9iamV0b0dyYXZhY2FvQ1RlQW51bGFjYW8oZGF0YSwgcmVnaXN0cm9DVGUsIHJlc3Bvc3RhTWVuc2FnZXJpYSk7DQoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0dyYXZhIG8gTm92byBDVC1lICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IElkc2Fsdm8gPSBhd2FpdCBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlaWRDVGUsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBncmF2YWN0ZWVtaXRpZG8sICIiLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9JZHNhbHZvID0gSlNPTi5wYXJzZShJZHNhbHZvKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkdGlkOiB0ZW1wbGF0ZWlkQ1RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZDogZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c3JpZDogZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogSWRzYWx2bywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ1cmxfcGRmX2N0ZSI6IGBodHRwczovL29uZXJneWRvY3MuYXp1cmV3ZWJzaXRlcy5uZXQvIy9kb2N1bWVudG9zL2RhY3RlLyR7ZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkfS8ke2RhdGEub25lcmd5X2pzX2N0eC51c3JpZH0vJHtJZHNhbHZvfS8ke3RlbXBsYXRlaWRDVGV9YA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdyYXZhIG8gRXZlbnRvIG5vIENUZSBkZSBBbnVsYcOnw6NvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgR3JhdmFFdmVudG8oSWRzYWx2bywgIkF1dG9yaXphw6fDo28iLCByZXNwb3N0YU1lbnNhZ2VyaWEub2Jqcy5wcm90b2NvbG9BdXRvcml6YWNhbywgcmVzcG9zdGFNZW5zYWdlcmlhLm9ianMuY2hhdmVBY2Vzc29DVGUsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkKQ0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXR1YWxpemEgb3MgRGFkb3MgZG8gQ1RlIEFudWxhZG8NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkdGlkOiB0ZW1wbGF0ZWlkQ1RlLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZDogZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c3JpZDogZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVnaXN0cm9DVGUuZmVkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJVcmxKc29uQ29udGV4dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic3RhdHVzX2N0ZV9jdGUiOiAiYW51bGFkbyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInN0YXR1c19jdGVfY3RlX2Rlc2MiOiAiQW51bGFkbyINCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsNCg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRW1haWwgU0lTDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVtYWlsQW51bGFjYW9JRCA9ICc0ZjNlNWZiMy1kYjFiLTQ2ZGMtYTc4YS01ODBkZjZiZDRiYjgnOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb250ZXVkb0VtYWlsID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAidXJsX3BkZl9EQUNURSI6IHVybHBkZg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBFbnZpYXJFbWFpbFNJUyhkYXRhLCBlbWFpbEFudWxhY2FvSUQsIGdyYXZhY3RlZW1pdGlkby51cmxfeG1sLCAnQU5VTEFDQU8nLCBncmF2YWN0ZWVtaXRpZG8ubnVtZXJvX2N0ZV9jdGUsIGNvbnRldWRvRW1haWwpOw0KDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9SZWN1cGVyYSBhcyBJbmZvcm1hw6fDtWVzIGRlIENhcmdhIG5vIENUZSBkZSBBbnVsYcOnw6NvIHBhcmEgbyBDVGUgQW51bGFkbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZWlkY2FyZ2EgPSAiMzNkOWNjODgtOTkyYS00NGQwLWI2NDQtZWUxYmY3ZWZmYmZiIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdHJvX2NhcmdhID0gSlNPTi5zdHJpbmdpZnkoWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IEZpZWxOYW1lOiAiSURfT05FX1JFRiIsIFR5cGU6ICJzdHJpbmciLCBGaXhlZFR5cGU6ICJzdHJpbmciLCBWYWx1ZTE6IGRhdGEuSURfT05FX1JFRiB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iamNhcmdhID0gYXdhaXQgZ2V0T25lcmd5SXRlbSh0ZW1wbGF0ZWlkY2FyZ2EsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBmaWx0cm9fY2FyZ2EpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpjYXJnYSAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsY2FyZ2EgaW4gb2JqY2FyZ2EpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdpc3Ryb2NhcmdhID0gb2JqY2FyZ2FbbGNhcmdhXS5VcmxKc29uQ29udGV4dDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvY2FyZ2EuSURfT05FX1JFRiA9IElkc2Fsdm87DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlaWRjYXJnYSwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIHJlZ2lzdHJvY2FyZ2EsICIiLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9SZWN1cGVyYSBhcyBJbmZvcm1hw6fDtWVzIGRlIE5GRXMgbm8gQ1RlIGRlIEFudWxhw6fDo28gcGFyYSBvIENUZSBBbnVsYWRvDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRlbXBsYXRlaWRuZmUgPSAiYzQyNTA1NDUtOTdkYS00YjYyLWI2YzgtOTAzNzQ5MThjODAxIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdHJvX25mZSA9IEpTT04uc3RyaW5naWZ5KFsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBGaWVsTmFtZTogIklEX09ORV9SRUYiLCBUeXBlOiAic3RyaW5nIiwgRml4ZWRUeXBlOiAic3RyaW5nIiwgVmFsdWUxOiBkYXRhLklEX09ORV9SRUYgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmpuZmUgPSBhd2FpdCBnZXRPbmVyZ3lJdGVtKHRlbXBsYXRlaWRuZmUsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBmaWx0cm9fbmZlKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqbmZlICE9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGxuZmUgaW4gb2JqbmZlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnaXN0cm9uZmUgPSBvYmpuZmVbbG5mZV0uVXJsSnNvbkNvbnRleHQ7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3Ryb25mZS5JRF9PTkVfUkVGID0gSWRzYWx2bzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRJdGVtVG9PbmVyZ3kodGVtcGxhdGVpZG5mZSwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIHJlZ2lzdHJvbmZlLCAiIiwgIiIpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vUmVjdXBlcmEgYXMgSW5mb3JtYcOnw7VlcyBkZSBPYnMgQ29udHJpYnVpbnRlIG5vIENUZSBkZSBBbnVsYcOnw6NvIHBhcmEgbyBDVGUgQW51bGFkbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZWlkb2MgPSAiN2Y1MmY5NTAtNmRkNS00N2Q0LTk2OTYtMDQwZmM5NDg4ZmY2IjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdHJvX29jID0gSlNPTi5zdHJpbmdpZnkoWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IEZpZWxOYW1lOiAiSURfT05FX1JFRiIsIFR5cGU6ICJzdHJpbmciLCBGaXhlZFR5cGU6ICJzdHJpbmciLCBWYWx1ZTE6IGRhdGEuSURfT05FX1JFRiB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iam9jID0gYXdhaXQgZ2V0T25lcmd5SXRlbSh0ZW1wbGF0ZWlkb2MsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBmaWx0cm9fb2MpOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvYmpvYyAhPT0gbnVsbCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBsb2MgaW4gb2Jqb2MpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWdpc3Ryb29jID0gb2Jqb2NbbG9jXS5VcmxKc29uQ29udGV4dDsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJvb2MuSURfT05FX1JFRiA9IElkc2Fsdm87DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlaWRvYywgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIHJlZ2lzdHJvb2MsICIiLCAiIik7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9SZWN1cGVyYSBhcyBJbmZvcm1hw6fDtWVzIGRlIGF1dG9yaXphZG9zIG5vIENUZSBkZSBBbnVsYcOnw6NvIHBhcmEgbyBDVGUgQW51bGFkbw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0ZW1wbGF0ZWlkYXUgPSAiMzI3NjI2ZTgtMjU5Yy00ZGE2LThiMTMtZGRmZTM4ODJmMTBkIjsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZmlsdHJvX2F1ID0gSlNPTi5zdHJpbmdpZnkoWw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IEZpZWxOYW1lOiAiSURfT05FX1JFRiIsIFR5cGU6ICJzdHJpbmciLCBGaXhlZFR5cGU6ICJzdHJpbmciLCBWYWx1ZTE6IGRhdGEuSURfT05FX1JFRiB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgXSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iamF1ID0gZ2V0T25lcmd5SXRlbSh0ZW1wbGF0ZWlkYXUsIGRhdGEuYXNzaWQsIGRhdGEudXNyaWQsIGZpbHRyb19hdSk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iamF1ICE9PSBudWxsKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGxhdSBpbiBvYmphdSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2lzdHJvYXUgPSBvYmphdVtsYXVdLlVybEpzb25Db250ZXh0Ow0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaXN0cm9hdS5JRF9PTkVfUkVGID0gSWRzYWx2bzsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNlbmRJdGVtVG9PbmVyZ3kodGVtcGxhdGVpZGF1LCBkYXRhLm9uZXJneV9qc19jdHguYXNzaWQsIGRhdGEub25lcmd5X2pzX2N0eC51c3JpZCwgcmVnaXN0cm9hdSwgIiIsICIiKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dFcnJvID0gcmVzcG9zdGFNZW5zYWdlcmlhLm9ianMucmV0b3Jub1NFRkFaOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGR1cGxpY2lkYWRlID0gZmFsc2U7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLmV4Y2VwdGlvbnMgJiYgcmVzcG9zdGFNZW5zYWdlcmlhLmV4Y2VwdGlvbnMubGVuZ3RoID4gMCkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsb2dSZXR1cm4gPSBbXTsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlbiBpbiByZXNwb3N0YU1lbnNhZ2VyaWEuZXhjZXB0aW9ucykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzcGVuID0gcmVzcG9zdGFNZW5zYWdlcmlhLmV4Y2VwdGlvbnNbZW5dOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dSZXR1cm4ucHVzaChgJHtyZXNwZW4uZGVzY3JpY2FvfVxuYCk7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwZW4uZGVzY3JpY2FvLmluZGV4T2YoJ0R1cGxpY2lkYWRlJykgIT0gLTEpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cGxpY2lkYWRlID0gdHJ1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm8gPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0Vycm8gPSBsb2dSZXR1cm4ubGVuZ3RoID4gMCA/IGxvZ1JldHVybi5qb2luKCcnKSA6ICcnOw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG9iakNhbGxCYWNrOw0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR1cGxpY2lkYWRlKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqQ2FsbEJhY2sgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiAnTk9LJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0R1cGxpY2lkYWRlJzogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQnOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bWVybyc6IGVudmlvYW51bGFjYW9jdGVPYmouTnVtZXJvQ1RlDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpDYWxsQmFjayA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXR1cyc6ICdOT0snLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRHVwbGljaWRhZGUnOiBmYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQnOiBmYWxzZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGJ1c2Nhck51bWVyYWNhbyhkYXRhLCBPYmpVbmlkYWRlRW1pc3Nhb1swXS5JRCwgdHJ1ZSwgb2JqQ2FsbEJhY2spOw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAgICAgZXJybyA9IHRydWU7DQogICAgICAgICAgICAgICAgICAgIGxvZ0Vycm8gPSAnRXJybyBuYSBGb3JtYcOnw6NvIGRvIE9iamV0byBkZSBFbnZpbyc7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICBlcnJvID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICBsb2dFcnJvID0gJ1Rva2VuIEludsOhbGlkbyBvdSBFbXByZXNhIG7Do28gQXV0b3JpemFkYSAhJzsNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGlmIChlcnJvKSB7DQogICAgICAgICAgICAgICAgYXdhaXQgb25lcmd5X3VwZGF0ZW1hbnkoew0KICAgICAgICAgICAgICAgICAgICBmZHRpZDogdGVtcGxhdGVpZENUZSwNCiAgICAgICAgICAgICAgICAgICAgYXNzaWQ6IGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwNCiAgICAgICAgICAgICAgICAgICAgdXNyaWQ6IGRhdGEub25lcmd5X2pzX2N0eC51c3JpZCwNCiAgICAgICAgICAgICAgICAgICAgaWQ6IHJlZ2lzdHJvQ1RlLmZlZGlkLA0KICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICAgICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xvZ19jdGUnOiBsb2dFcnJvDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQogICAgcmV0dXJuIFNldE9iamVjdFJlc3BvbnNlKHRydWUsIGRhdGEsIGZhbHNlKTsNCn0NCg0KZnVuY3Rpb24gaW5pdEJlZm9yZShqc29uKSB7DQogICAgcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIGluaXREZWxldGUoanNvbikgew0KICAgIC8vcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIFNldE9iamVjdFJlc3BvbnNlKGNvbmQsIGpzb24sIFdhaXRpbmdXZWJIb29rKSB7DQogICAgaWYgKFdhaXRpbmdXZWJIb29rID09PSB1bmRlZmluZWQpDQogICAgICAgIFdhaXRpbmdXZWJIb29rID0gZmFsc2U7DQoNCiAgICB2YXIgb2JqID0gew0KICAgICAgICAnY29uZCc6IGNvbmQsDQogICAgICAgICdqc29uJzogSlNPTi5zdHJpbmdpZnkoanNvbiksDQogICAgICAgICdXYWl0aW5nV2ViSG9vayc6IFdhaXRpbmdXZWJIb29rLA0KICAgIH07DQogICAgcmV0dXJuIG9iajsNCn0NCg0KZnVuY3Rpb24gZGF0ZVRvU3RyaW5nKGRhdGEpIHsNCiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGRhdGEpOw0KICAgIGxldCBhbm8gPSBkYXRlLmdldEZ1bGxZZWFyKCk7DQogICAgbGV0IG1lcyA9ICgoZGF0ZS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAwKSk7DQogICAgbGV0IGRpYSA9IChkYXRlLmdldERhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIDApKTsNCiAgICByZXR1cm4gYCR7YW5vfS0ke21lc30tJHtkaWF9YA0KfQ0KDQphc3luYyBmdW5jdGlvbiBQZWdhVG9rZW4ob2JqKSB7DQoNCiAgICBsZXQgdXNyTG9naW4gPSAicHIzc3QzeCI7DQogICAgbGV0IHB3ZCA9ICJwcjNzdDN4Y3QzMjAyMSI7DQogICAgbGV0IHN0clJlc3BUb2tlbiA9ICIiOw0KICAgIGF3YWl0IGF4aW9zKHsNCiAgICAgICAgdXJsOiAiaHR0cHM6Ly9hcGlrZWVwdHJ1ZWRmZS5henVyZXdlYnNpdGVzLm5ldC9hcGkvTG9naW4/cFVzZXJOYW1lPSIgKyB1c3JMb2dpbiArICImcFBhc3M9IiArIHB3ZCwNCiAgICAgICAgbWV0aG9kOiAnR0VUJywNCiAgICAgICAgZGF0YTogIiIsDQogICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsDQogICAgfSkudGhlbigocmVzcG9uc2UpID0+IHsNCiAgICAgICAgc3RyUmVzcFRva2VuID0gcmVzcG9uc2UuZGF0YTsNCiAgICB9LCAoZXJyb3IpID0+IHsNCiAgICAgICAgc3RyUmVzcFRva2VuID0gJycNCiAgICB9KTsNCiAgICByZXR1cm4gc3RyUmVzcFRva2VuOw0KICAgIC8qDQogICAgbGV0IHVzckxvZ2luID0gb25lcmd5LkdldFN1YnNjcmlwdGlvbkNvbmZpZygidXN1YXJpb19kZmUiKTsNCiAgICBsZXQgcHdkID0gb25lcmd5LkdldFN1YnNjcmlwdGlvbkNvbmZpZygic2VuaGFfZGZlIik7DQogICAgbGV0IHN0clJlc3BUb2tlbiA9ICIiOw0KICAgIEFqYXgoew0KICAgICAgICB1cmw6ICJodHRwczovL2FwaWtlZXB0cnVlZGZlLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9Mb2dpbj9wVXNlck5hbWU9IiArIHVzckxvZ2luICsgIiZwUGFzcz0iICsgcHdkLA0KICAgICAgICBhc3NpZDogb2JqLmFzc2lkLA0KICAgICAgICB1c3JpZDogb2JqLnVzcmlkLA0KICAgICAgICBmZWRpZDogb2JqLmZlZGlkLA0KICAgICAgICBtZXRob2Q6ICdHRVQnLA0KICAgICAgICBkYXRhOiAiIiwNCiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywNCiAgICAgICAgYXN5bmM6IGZhbHNlLA0KICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikgew0KICAgICAgICAgICAgc3RyUmVzcFRva2VuID0gZGF0YTsNCiAgICAgICAgfSwNCiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGpxWEhSLCBleGNlcHRpb24pIHsNCiAgICAgICAgICAgIHN0clJlc3BUb2tlbiA9IGV4Y2VwdGlvbjsNCiAgICAgICAgfQ0KICAgIH0pOw0KICAgIHJldHVybiBKU09OLnBhcnNlKHN0clJlc3BUb2tlbik7DQogICAgKi8NCn0NCg0KYXN5bmMgZnVuY3Rpb24gQ3JpYU9iamV0b0FudWxhY2FvQ3RlKG9iaiwgZGF0YSwgRW1pc3NvciwgRW5kRW1pc3Nvcikgew0KICAgIGxldCBJbmRpY2Fkb3JOZWdvY2lhdmVsID0gIiI7DQogICAgaWYgKG9iai5pbmRpY2Fkb3JfbmVnb2NpYXZlbF9jdGVfZGVzYyA9PSAiTsOjbyIpIHsNCiAgICAgICAgSW5kaWNhZG9yTmVnb2NpYXZlbCA9ICJOYW9OZWdvY2lhdmVsIjsNCiAgICB9IGVsc2Ugew0KICAgICAgICBJbmRpY2Fkb3JOZWdvY2lhdmVsID0gIk5lZ29jaWF2ZWwiOw0KICAgIH0NCg0KICAgIGxldCBFbWlzc29yVXJsSnNvbkNvbnRleHQgPSBFbWlzc29yWzBdLlVybEpzb25Db250ZXh0Ow0KICAgIGxldCBFbmRFbWlzc29yVXJsSnNvbkNvbnRleHQgPSBFbmRFbWlzc29yWzBdLlVybEpzb25Db250ZXh0Ow0KICAgIGxldCBVcmxDZXJ0aWZpY2FkbyA9IEVtaXNzb3JVcmxKc29uQ29udGV4dC5jZXJ0aWZpY2Fkb1swXS5Vcmw7DQoNCiAgICBsZXQgZ25DRk9QID0gIiI7DQogICAgbGV0IGduQ0ZPUERlc2MgPSAiIjsNCiAgICBpZiAob2JqLk1MT0Nlc3RhZG9fdWZfX3VmX29yaWdlbV9kYV9jYXJnYSA9PT0gb2JqLk1MT0Nlc3RhZG9fdWZfX3VmX2Rlc3Rpbm9fZGFfY2FyZ2EpIHsNCiAgICAgICAgZ25DRk9QID0gIjEyMDYiOw0KICAgICAgICBnbkNGT1BEZXNjID0gJ0FudWxhw6fDo28gZGUgdmFsb3IgcmVsYXRpdm8gw6AgcHJlc3Rhw6fDo28gZGUgc2VydmnDp28gZGUgdHJhbnNwb3J0ZSc7DQogICAgfSBlbHNlIHsNCiAgICAgICAgZ25DRk9QID0gIjIyMDYiOw0KICAgICAgICBnbkNGT1BEZXNjID0gJ0FudWxhw6fDo28gZGUgdmFsb3IgcmVsYXRpdm8gw6AgcHJlc3Rhw6fDo28gZGUgc2VydmnDp28gZGUgdHJhbnNwb3J0ZSc7DQogICAgfQ0KDQogICAgbGV0IG9iak51bVNlcmllQ1RlID0gYXdhaXQgYnVzY2FyTnVtZXJhY2FvKG9iaiwgRW1pc3NvclswXS5JRCwgZmFsc2UsIG51bGwpOw0KICAgIHRyeSB7DQogICAgICAgIGxldCBlbnZpb2N0ZU9ianRtcCA9IHsNCiAgICAgICAgICAgICJMaW5rQ2VydGlmaWNhZG8iOiBVcmxDZXJ0aWZpY2FkbywNCiAgICAgICAgICAgICJTZW5oYUNlcnQiOiBFbWlzc29yVXJsSnNvbkNvbnRleHQuc2VuaGFfY2VydGlmaWNhZG8sDQogICAgICAgICAgICAiVGlwb0FtYmllbnRlIjogRW1pc3NvclVybEpzb25Db250ZXh0LmFtYmllbnRlLA0KICAgICAgICAgICAgIlVGRW1pdGVudGVDVGUiOiBFbmRFbWlzc29yVXJsSnNvbkNvbnRleHQuTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2EsDQogICAgICAgICAgICAiQ05QSkVtaXRlbnRlQ1RlIjogRW1pc3NvclVybEpzb25Db250ZXh0LmNucGosDQogICAgICAgICAgICAiSUVFbWl0ZW50ZUNUZSI6IEVtaXNzb3JVcmxKc29uQ29udGV4dC5pZS50b1N0cmluZygpLA0KICAgICAgICAgICAgIlJhemFvU29jaWFsTm9tZUVtaXRlbnRlQ1RlIjogcmV0aXJhX2FjZW50b3MoRW1pc3NvclVybEpzb25Db250ZXh0LnJhemFvX3NvY2lhbCksDQogICAgICAgICAgICAiTm9tZUZhbnRhc2lhQXBlbGlkb0VtaXRlbnRlQ1RlIjogcmV0aXJhX2FjZW50b3MoRW1pc3NvclVybEpzb25Db250ZXh0Lm5vbWVfZXN0YWJlbGVjaW1lbm90KSwNCiAgICAgICAgICAgICJMb2dyYWRvdXJvRW1pdGVudGVDVGUiOiByZXRpcmFfYWNlbnRvcyhFbmRFbWlzc29yVXJsSnNvbkNvbnRleHQubG9ncmFkb3Vyb19lbXByZXNhKSwNCiAgICAgICAgICAgICJOdW1lcm9Mb2dyYWRvdXJvRW1pdGVudGVDVGUiOiBFbmRFbWlzc29yVXJsSnNvbkNvbnRleHQubnVtZXJvX2VtcHJlc2EudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJDb21wbGVtZW50b0xvZ3JhZG91cm9FbWl0ZW50ZUNUZSI6IHJldGlyYV9hY2VudG9zKEVuZEVtaXNzb3JVcmxKc29uQ29udGV4dC5jb21wbGVtZW50b19lbXByZXNhKSwNCiAgICAgICAgICAgICJCYWlycm9Mb2dyYWRvdXJvRW1pdGVudGVDVGUiOiByZXRpcmFfYWNlbnRvcyhFbmRFbWlzc29yVXJsSnNvbkNvbnRleHQuYmFpcnJvX2VtcHJlc2EpLA0KICAgICAgICAgICAgIkNvZE11bmljaXBpb0VtaXRlbnRlQ1RlIjogRW5kRW1pc3NvclVybEpzb25Db250ZXh0Lk1MT0NabXVuaWNpcGlvX2liZ2UsDQogICAgICAgICAgICAiTm9tZU11bmljaXBpb0VtaXRlbnRlQ1RlIjogcmV0aXJhX2FjZW50b3MoRW5kRW1pc3NvclVybEpzb25Db250ZXh0Lk1MT0NabXVuaWNpcGlvX25vbWVfX211bmljaXBpb19lbXByZXNhKSwNCiAgICAgICAgICAgICJDRVBMb2dyYWRvdXJvRW1pdGVudGVDVGUiOiByZXRvcm5hX3NvbWVudGVudW1lcm9zKEVuZEVtaXNzb3JVcmxKc29uQ29udGV4dC5jZXBfZW1wcmVzYSksDQogICAgICAgICAgICAiVGVsZWZvbmVFbWl0ZW50ZUNUZSI6IHJldG9ybmFfc29tZW50ZW51bWVyb3MoRW1pc3NvclVybEpzb25Db250ZXh0LnRlbGVmb25lKSwNCiAgICAgICAgICAgICJDb2RpZ29NdW5pY2lwaW9JbmljaW9QcmVzdGFjYW8iOiBvYmouTUxPQ211bmljaXBpb19pYmdlX19vcmlnZW1fbXVuaWNpcGlvX2liZ2UsDQogICAgICAgICAgICAiTm9tZU11bmljaXBpb0luaWNpb1ByZXN0YWNhbyI6IG9iai5NTE9DbXVuaWNpcGlvX25vbWVfX211bmljaXBpb19vcmlnZW1fZGFfY2FyZ2EsDQogICAgICAgICAgICAiVUZJbmljaW9QcmVzdGFjYW8iOiBvYmouTUxPQ2VzdGFkb191Zl9fdWZfb3JpZ2VtX2RhX2NhcmdhLA0KICAgICAgICAgICAgIkNvZGlnb011bmljaXBpb0ZpbVByZXN0YWNhbyI6IG9iai5NTE9DbXVuaWNpcGlvX2liZ2VfX2Rlc3Rpbm9fbXVuaWNpcGlvX2liZ2UsDQogICAgICAgICAgICAiTm9tZU11bmljaXBpb0ZpbVByZXN0YWNhbyI6IG9iai5NTE9DbXVuaWNpcGlvX25vbWVfX211bmljaXBpb19kZXN0aW5vX2RhX2NhcmdhLA0KICAgICAgICAgICAgIlVGRmltUHJlc3RhY2FvIjogb2JqLk1MT0Nlc3RhZG9fdWZfX3VmX2Rlc3Rpbm9fZGFfY2FyZ2EsDQogICAgICAgICAgICAiTW9kYWxpZGFkZSI6IE51bWJlcihvYmoubW9kYWxpZGFkZV9jdGUpLA0KICAgICAgICAgICAgIkNGT1AiOiBnbkNGT1AsDQogICAgICAgICAgICAiRGVzY3JpY2FvQ0ZPUCI6IGduQ0ZPUERlc2MsDQogICAgICAgICAgICAiRm9ybWF0b0ltcHJlc3Nhb0RBQ1RFIjogIk5vcm1hbFJldHJhdG8iLA0KICAgICAgICAgICAgIlNlcmllQ1RlIjogb2JqTnVtU2VyaWVDVGUuU2VyaWUsDQogICAgICAgICAgICAiTnVtZXJvQ1RlIjogb2JqTnVtU2VyaWVDVGUuTnVtZXJvLA0KICAgICAgICAgICAgIkRhdGFFbWlzc2FvIjogdXRpbHMuR2V0VXNlckR0Tm93KCJ5eXl5LU1NLWRkIEhIOm1tOnNzIiksDQogICAgICAgICAgICAiRmluYWxpZGFkZUVtaXNzYW9DVGUiOiAiQW51bGFjYW8iLA0KICAgICAgICAgICAgIklkZW50aWZpY2Fkb3JHbG9iYWxpemFkbyI6IHJldGlyYV9hY2VudG9zKG9iai5pZGVudGlmaWNhZG9yX2dsb2JhbGl6YWRvX2N0ZV9kZXNjKSwNCiAgICAgICAgICAgICJNb2RhbGlkYWRlVHJhbnNwb3J0ZSI6IG9iai5tb2RhbGlkYWRlX3RyYW5zcG9ydGVfY3RlLA0KICAgICAgICAgICAgIlRpcG9TZXJ2aWNvQ1RlIjogb2JqLnRpcG9fc2Vydmljb19jdGVfY3RlX2Rlc2MsDQogICAgICAgICAgICAiUmVjZWJlZG9yUmV0aXJhIjogcmV0aXJhX2FjZW50b3Mob2JqLnJlY2ViZWRvcl9yZXRpcmFfY3RlX2Rlc2MpLA0KICAgICAgICAgICAgIkRldGFsaGVzUmV0aXJhZGEiOiBvYmouZGV0YWxoZXNfcmV0aXJhZGFfY3RlLA0KICAgICAgICAgICAgIkluZGljYWRvcklFVG9tYWRvciI6IG9iai5FTVBpbmRpY2Fkb3JfZGVfaWVfX2luZGljYWRvcl9pZV90b21hZG9yX2N0ZSwNCiAgICAgICAgICAgICJSZXNwb25zYXZlbEZyZXRlIjogcmV0aXJhX2FjZW50b3Mob2JqLnJlc3BvbnNhdmVsX2ZyZXRlX2N0ZV9kZXNjKSwNCiAgICAgICAgICAgICJUb21hZG9yQ05QSiI6IG9iai5FTVBjbnBqX2VtcHJlc2FfX3RvbWFkb3JfY25wal9jdGUsDQogICAgICAgICAgICAiVG9tYWRvcklFIjogb2JqLkVNUGllX2VtcHJlc2FfX3RvbWFkb3JfaWVfY3RlLnRvU3RyaW5nKCkgPT0gJzAnID8gIiIgOiBvYmouRU1QaWVfZW1wcmVzYV9fdG9tYWRvcl9pZV9jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJUb21hZG9yUmF6YW9Tb2NpYWxOb21lIjogb2JqLkVNUHJhemFvX3NvY2lhbF9lbXByZXNhX190b21hZG9yX3JhemFvX3NvY2lhbF9ub21lX2N0ZSwNCiAgICAgICAgICAgICJUb21hZG9yTm9tZUZhbnRhc2lhIjogb2JqLkVNUG5vbWVfZmFudGFzaWFfZW1wcmVzYV9fdG9tYWRvcl9ub21lX2ZhbnRhc2lhX2N0ZSwNCiAgICAgICAgICAgICJUb21hZG9yRm9uZSI6IHJldG9ybmFfc29tZW50ZW51bWVyb3Mob2JqLkVNUHRlbGVmb25lX2VtcHJlc2FfX3RvbWFkb3JfZm9uZV9jdGUpLA0KICAgICAgICAgICAgIlRvbWFkb3JMb2dyYWRvdXJvIjogb2JqLkVNUGxvZ3JhZG91cm9fZW1wcmVzYV9fdG9tYWRvcl9sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJUb21hZG9yTnVtZXJvTG9ncmFkb3VybyI6IHJldG9ybmFfc29tZW50ZW51bWVyb3Mob2JqLkVNUG51bWVyb19lbXByZXNhX190b21hZG9yX251bWVyb19sb2dyYWRvdXJvX2N0ZSksDQogICAgICAgICAgICAiVG9tYWRvckNvbXBsZW1lbnRvTG9ncmFkb3VybyI6IG9iai5FTVBjb21wbGVtZW50b19lbXByZXNhX190b21hZG9yX2NvbXBsZW1lbnRvX2xvZ3JhZG91cm9fY3RlLA0KICAgICAgICAgICAgIlRvbWFkb3JCYWlycm9Mb2dyYWRvdXJvIjogb2JqLkVNUGJhaXJyb19lbXByZXNhX190b21hZG9yX2JhaXJyb19sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJUb21hZG9yQ29kTXVuaWNpcGlvTG9ncmFkb3VybyI6IG9iai5FTVBNTE9DWm11bmljaXBpb19pYmdlX190b21hZG9yX2NvZF9tdW5pY2lwaW9fbG9ncmFkb3Vyb19jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJUb21hZG9yTm9tZU11bmljaXBpb0xvZ3JhZG91cm8iOiBvYmouRU1QTUxPQ1ptdW5pY2lwaW9fbm9tZV9fbXVuaWNpcGlvX2VtcHJlc2FfX3RvbWFkb3Jfbm9tZV9tdW5pY2lwaW9fbG9ncmFkb3Vyb19jdGUsDQogICAgICAgICAgICAiVG9tYWRvckNFUExvZ3JhZG91cm8iOiByZXRvcm5hX3NvbWVudGVudW1lcm9zKG9iai5FTVBjZXBfZW1wcmVzYV9fdG9tYWRvcl9jZXBfbG9ncmFkb3Vyb19jdGUpLA0KICAgICAgICAgICAgIlRvbWFkb3JVRkxvZ3JhZG91cm8iOiBvYmouRU1QTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2FfX3RvbWFkb3JfdWZfbG9ncmFkb3Vyb19jdGUsDQogICAgICAgICAgICAiVG9tYWRvckNvZFBhaXNMb2dyYWRvdXJvIjogb2JqLkVNUE1MT0NacGFpc19pYmdlX190b21hZG9yX2NvZF9wYWlzX2xvZ3JhZG91cm9fY3RlLnRvU3RyaW5nKCksDQogICAgICAgICAgICAiVG9tYWRvck5vbWVQYWlzTG9ncmFkb3VybyI6IG9iai5FTVBNTE9DWnBhaXNfbm9tZV9fbm9tZV9kb19wYWlzX2VtcHJlc2FfX3RvbWFkb3Jfbm9tZV9wYWlzX2xvZ3JhZG91cm9fY3RlLA0KICAgICAgICAgICAgIlRvbWFkb3JFbWFpbCI6IG9iai5FTVBlbWFpbF9lbXByZXNhX190b21hZG9yX2VtYWlsX2N0ZSwNCiAgICAgICAgICAgICJDYXJhY3RlcmlzdGljYXNBZFRyYW5zcG9ydGUiOiBvYmouY2FyYWN0ZXJpc3RpY2FzX2FkX3RyYW5zcG9ydGVfY3RlICE9ICJOQU9TRUxFQ0lPTkFETyIgPyBvYmouY2FyYWN0ZXJpc3RpY2FzX2FkX3RyYW5zcG9ydGVfY3RlIDogIiIsDQogICAgICAgICAgICAiQ2FyYWN0ZXJpc3RpY2FzQWRTZXJ2aWNvIjogb2JqLmNhcmFjdGVyaXN0aWNhc19hZF9zZXJ2aWNvX2N0ZSwNCiAgICAgICAgICAgICJGdW5jaW9uYXJpb0VtaXNzb3IiOiBvYmouZnVuY2lvbmFyaW9fZW1pc3Nvcl9jdGUsDQogICAgICAgICAgICAiU2lnbGFDb2RGaWxpYWxQb3J0b0VzdGFjYW9BZXJvT3JpZ2VtIjogb2JqLnNpZ2xhX2NvZF9maWxpYWxfcG9ydG9fZXN0YWNhb19hZXJvX29yaWdlbV9jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJTaWdsYUNvZEZpbGlhbFBvcnRvRXN0YWNhb0Flcm9EZXN0aW5vIjogb2JqLnNpZ2xhX2NvZF9maWxpYWxfcG9ydG9fZXN0YWNhb19hZXJvX2Rlc3Rpbm9fY3RlLnRvU3RyaW5nKCksDQogICAgICAgICAgICAiTXVuaWNpcGlvVUZPcmlnZW1DYWxjRnJldGUiOiByZXRpcmFfYWNlbnRvcyhvYmouTUxPQ211bmljaXBpb19ub21lX19tdW5pY2lwaW9fb3JpZ2VtX2RhX2NhcmdhKSArICcvJyArIG9iai5NTE9DZXN0YWRvX3VmX191Zl9vcmlnZW1fZGFfY2FyZ2EsDQogICAgICAgICAgICAiTXVuaWNpcGlvVUZEZXN0aW5vQ2FsY0ZyZXRlIjogcmV0aXJhX2FjZW50b3Mob2JqLk1MT0NtdW5pY2lwaW9fbm9tZV9fbXVuaWNpcGlvX2Rlc3Rpbm9fZGFfY2FyZ2EpICsgJy8nICsgb2JqLk1MT0Nlc3RhZG9fdWZfX3VmX2Rlc3Rpbm9fZGFfY2FyZ2EsDQogICAgICAgICAgICAiT2JzZXJ2YWNvZXMiOiBvYmoub2JzZXJ2YWNvZXNfY3RlLA0KICAgICAgICAgICAgIlJlbWV0ZW50ZUNOUEoiOiBvYmouRU1QY25wal9lbXByZXNhX19yZW1ldGVudGVfY25wal9jdGUsDQogICAgICAgICAgICAiUmVtZXRlbnRlSUUiOiBvYmouRU1QaWVfZW1wcmVzYV9fcmVtZXRlbnRlX2llX2N0ZS50b1N0cmluZygpID09ICcwJyA/ICIiIDogb2JqLkVNUGllX2VtcHJlc2FfX3JlbWV0ZW50ZV9pZV9jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJSZW1ldGVudGVSYXphb1NvY2lhbE5vbWUiOiBvYmouRU1QcmF6YW9fc29jaWFsX2VtcHJlc2FfX3JlbWV0ZW50ZV9yYXphb19zb2NpYWxfbm9tZV9jdGUsDQogICAgICAgICAgICAiUmVtZXRlbnRlTm9tZUZhbnRhc2lhQXBlbGlkbyI6IG9iai5FTVBub21lX2ZhbnRhc2lhX2VtcHJlc2FfX3JlbWV0ZW50ZV9ub21lX2ZhbnRhc2lhX2FwZWxpZG9fY3RlLA0KICAgICAgICAgICAgIlJlbWV0ZW50ZUZvbmUiOiByZXRvcm5hX3NvbWVudGVudW1lcm9zKG9iai5FTVB0ZWxlZm9uZV9lbXByZXNhX19yZW1ldGVudGVfZm9uZV9jdGUpLA0KICAgICAgICAgICAgIlJlbWV0ZW50ZUxvZ3JhZG91cm8iOiBvYmouRU1QbG9ncmFkb3Vyb19lbXByZXNhX19yZW1ldGVudGVfbG9ncmFkb3Vyb19jdGUsDQogICAgICAgICAgICAiUmVtZXRlbnRlTnVtZXJvTG9ncmFkb3VybyI6IG9iai5FTVBudW1lcm9fZW1wcmVzYV9fcmVtZXRlbnRlX251bWVyb19sb2dyYWRvdXJvX2N0ZS50b1N0cmluZygpLA0KICAgICAgICAgICAgIlJlbWV0ZW50ZUJhaXJyb0xvZ3JhZG91cm8iOiBvYmouRU1QYmFpcnJvX2VtcHJlc2FfX3JlbWV0ZW50ZV9iYWlycm9fbG9ncmFkb3Vyb19jdGUsDQogICAgICAgICAgICAiUmVtZXRlbnRlQ29kTXVuaWNpcGlvTG9ncmFkb3VybyI6IG9iai5FTVBNTE9DWm11bmljaXBpb19pYmdlX19yZW1ldGVudGVfY29kX211bmljaXBpb19sb2dyYWRvdXJvX2N0ZS50b1N0cmluZygpLA0KICAgICAgICAgICAgIlJlbWV0ZW50ZU5vbWVNdW5pY2lwaW9Mb2dyYWRvdXJvIjogb2JqLkVNUE1MT0NabXVuaWNpcGlvX25vbWVfX211bmljaXBpb19lbXByZXNhX19yZW1ldGVudGVfbm9tZV9tdW5pY2lwaW9fbG9ncmFkb3Vyb19jdGUsDQogICAgICAgICAgICAiUmVtZXRlbnRlQ0VQTG9ncmFkb3VybyI6IHJldG9ybmFfc29tZW50ZW51bWVyb3Mob2JqLkVNUGNlcF9lbXByZXNhX19yZW1ldGVudGVfY2VwX2xvZ3JhZG91cm9fY3RlKSwNCiAgICAgICAgICAgICJSZW1ldGVudGVVRkxvZ3JhZG91cm8iOiBvYmouRU1QTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2FfX3JlbWV0ZW50ZV91Zl9sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJSZW1ldGVudGVDb2RQYWlzTG9ncmFkb3VybyI6IG9iai5FTVBNTE9DWnBhaXNfaWJnZV9fcmVtZXRlbnRlX2NvZF9wYWlzX2xvZ3JhZG91cm9fY3RlLnRvU3RyaW5nKCksDQogICAgICAgICAgICAiUmVtZXRlbnRlTm9tZVBhaXNMb2dyYWRvdXJvIjogb2JqLkVNUE1MT0NacGFpc19ub21lX19ub21lX2RvX3BhaXNfZW1wcmVzYV9fcmVtZXRlbnRlX25vbWVfcGFpc19sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJSZW1ldGVudGVFbWFpbCI6IG9iai5FTVBlbWFpbF9lbXByZXNhX19yZW1ldGVudGVfZW1haWxfY3RlLA0KICAgICAgICAgICAgIkRlc3RpbmF0YXJpb0NOUEoiOiBvYmouRU1QY25wal9lbXByZXNhX19kZXN0aW5hdGFyaW9fY25wal9jdGUsDQogICAgICAgICAgICAiRGVzdGluYXRhcmlvSUUiOiBvYmouRU1QaWVfZW1wcmVzYV9fZGVzdGluYXRhcmlvX2llX2N0ZS50b1N0cmluZygpID09ICcwJyA/ICIiIDogb2JqLkVNUGllX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19pZV9jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJEZXN0aW5hdGFyaW9SYXphb1NvY2lhbE5vbWUiOiBvYmouRU1QcmF6YW9fc29jaWFsX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19yYXphb19zb2NpYWxfbm9tZV9jdGUsDQogICAgICAgICAgICAiRGVzdGluYXRhcmlvRm9uZSI6IHJldG9ybmFfc29tZW50ZW51bWVyb3Mob2JqLkVNUHRlbGVmb25lX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19mb25lX2N0ZSksDQogICAgICAgICAgICAiRGVzdGluYXRhcmlvTG9ncmFkb3VybyI6IG9iai5FTVBsb2dyYWRvdXJvX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJEZXN0aW5hdGFyaW9OdW1lcm9Mb2dyYWRvdXJvIjogb2JqLkVNUG51bWVyb19lbXByZXNhX19kZXN0aW5hdGFyaW9fbnVtZXJvX2xvZ3JhZG91cm9fY3RlLnRvU3RyaW5nKCksDQogICAgICAgICAgICAiRGVzdGluYXRhcmlvQmFpcnJvTG9ncmFkb3VybyI6IG9iai5FTVBiYWlycm9fZW1wcmVzYV9fZGVzdGluYXRhcmlvX2JhaXJyb19sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJEZXN0aW5hdGFyaW9Db2RNdW5pY2lwaW9Mb2dyYWRvdXJvIjogb2JqLkVNUE1MT0NabXVuaWNpcGlvX2liZ2VfX2Rlc3RpbmF0YXJpb19jb2RfbXVuaWNpcGlvX2xvZ3JhZG91cm9fY3RlLnRvU3RyaW5nKCksDQogICAgICAgICAgICAiRGVzdGluYXRhcmlvTm9tZU11bmljaXBpb0xvZ3JhZG91cm8iOiBvYmouRU1QTUxPQ1ptdW5pY2lwaW9fbm9tZV9fbXVuaWNpcGlvX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19ub21lX211bmljaXBpb19sb2dyYWRvdXJvX2N0ZSwNCiAgICAgICAgICAgICJEZXN0aW5hdGFyaW9DRVBMb2dyYWRvdXJvIjogcmV0b3JuYV9zb21lbnRlbnVtZXJvcyhvYmouRU1QY2VwX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19jZXBfbG9ncmFkb3Vyb19jdGUpLA0KICAgICAgICAgICAgIkRlc3RpbmF0YXJpb1VGTG9ncmFkb3VybyI6IG9iai5FTVBNTE9DWmVzdGFkb191Zl9fdWZfZW1wcmVzYV9fZGVzdGluYXRhcmlvX3VmX2xvZ3JhZG91cm9fY3RlLA0KICAgICAgICAgICAgIkRlc3RpbmF0YXJpb0NvZFBhaXNMb2dyYWRvdXJvIjogb2JqLkVNUE1MT0NacGFpc19pYmdlX19kZXN0aW5hdGFyaW9fY29kX3BhaXNfbG9ncmFkb3Vyb19jdGUudG9TdHJpbmcoKSwNCiAgICAgICAgICAgICJEZXN0aW5hdGFyaW9Ob21lUGFpc0xvZ3JhZG91cm8iOiBvYmouRU1QTUxPQ1pwYWlzX25vbWVfX25vbWVfZG9fcGFpc19lbXByZXNhX19kZXN0aW5hdGFyaW9fbm9tZV9wYWlzX2xvZ3JhZG91cm9fY3RlLA0KICAgICAgICAgICAgIkRlc3RpbmF0YXJpb0VtYWlsIjogb2JqLkVNUGVtYWlsX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb19lbWFpbF9jdGUsDQogICAgICAgICAgICAiVmFsb3JUb3RhbFByZXN0YWNhb1NlcnZpY29zIjogb2JqLnZhbG9yX3RvdGFsX3ByZXN0YWNhb19zZXJ2aWNvc19jdGUsDQogICAgICAgICAgICAiVmFsb3JSZWNlYmVyIjogb2JqLnZhbG9yX3JlY2ViZXJfY3RlLA0KICAgICAgICAgICAgIkNTVCI6IG9iai5jc3RfY3RlX2Rlc2MgPT09ICI5MCAtIE91dHJhcyBPcGVyYcOnw7JlcyIgPyAiT3V0cmFVRiIgOiBvYmouY3N0X2N0ZSwNCiAgICAgICAgICAgICJWYWxvckJhc2VDYWxjIjogb2JqLnZhbG9yX2Jhc2VfY2FsY19jdGUsDQogICAgICAgICAgICAiUGVyY0lDTVMiOiBvYmoucGVyY19pY21zX2N0ZSwNCiAgICAgICAgICAgICJWYWxvcklDTVMiOiBvYmoudmFsb3JfaWNtc19jdGUsDQogICAgICAgICAgICAiUGVyY1JlZHVjYW9CYXNlQ2FsYyI6IG9iai5wZXJjX3JlZHVjYW9fYmFzZV9jYWxjX2N0ZSA/IG9iai5wZXJjX3JlZHVjYW9fYmFzZV9jYWxjX2N0ZSA6IDAsDQogICAgICAgICAgICAiVmFsb3JCYXNlQ2FsY1NUUmV0aWRvIjogb2JqLnZhbG9yX2Jhc2VfY2FsY19zdF9yZXRpZG9fY3RlLA0KICAgICAgICAgICAgIlZhbG9ySUNNU1NUUmV0aWRvIjogb2JqLnZhbG9yX2ljbXNfc3RfcmV0aWRvX2N0ZSwNCiAgICAgICAgICAgICJQZXJjSUNNU1NUUmV0aWRvIjogb2JqLmFsaXF1b3RhX2ljbXNfc3RfcmV0aWRvLA0KICAgICAgICAgICAgIlZhbG9yQ3JlZGl0byI6IG9iai52YWxvcl9jcmVkaXRvX2N0ZSwNCiAgICAgICAgICAgICJQZXJjUmVkdWNhb0Jhc2VDYWxjT3V0cmFVRiI6IG9iai5wZXJjX3JlZHVjYW9fYmFzZV9jYWxjX291dHJhX3VmX2N0ZSA/IG9iai5wZXJjX3JlZHVjYW9fYmFzZV9jYWxjX291dHJhX3VmX2N0ZSA6IDAsDQogICAgICAgICAgICAiVmFsb3JCYXNlQ2FsY091dHJhVUYiOiBvYmoudmFsb3JfYmFzZV9jYWxjX291dHJhX3VmX2N0ZSwNCiAgICAgICAgICAgICJQZXJjSUNNU091dHJhVUYiOiBvYmoucGVyY19pY21zX291dHJhX3VmX2N0ZSwNCiAgICAgICAgICAgICJWYWxvcklDTVNPdXRyYVVGIjogb2JqLnZhbG9yX2ljbXNfb3V0cmFfdWZfY3RlLA0KICAgICAgICAgICAgIkNvbnRyaWJ1aW50ZVNpbXBsZXNOYWNpb25hbCI6IG9iai5FTVBjb250cmlidWludGVfZG9fc2ltcGxlc19uYWNpb25hbF9lbXByZXNhX19jb250cmlidWludGVfc2ltcGxlc19uYWNpb25hbF9jdGVfZGVzYywNCiAgICAgICAgICAgICJWYWxvclRvdGFsVHJpYnV0b3MiOiBvYmoudmFsb3JfdG90YWxfdHJpYnV0b3NfY3RlLA0KICAgICAgICAgICAgIlZhbG9yQmFzZUNhbGNVRkZpbSI6IG9iai52YWxvcl9iYXNlX2NhbGNfdWZfZmltX2N0ZSwNCiAgICAgICAgICAgICJQZXJjRkNQVUZGaW0iOiBvYmoucGVyY19mY3BfdWZfZmltX2N0ZSwNCiAgICAgICAgICAgICJQZXJjSUNNU1VGRmltIjogb2JqLnBlcmNfaWNtc191Zl9maW1fY3RlLA0KICAgICAgICAgICAgIkFsaXF1b3RhSW50ZXJlc3RhZHVhbCI6IG9iai5hbGlxdW90YV9pbnRlcl9lc3RhZHVhbF9jdGUsDQogICAgICAgICAgICAiUGVyY1Byb3Zpc29yaW9QYXJ0aWxoYSI6IG9iai5wZXJjX3Byb3Zpc29yaW9fcGFydGlsaGFfY3RlID8gb2JqLnBlcmNfcHJvdmlzb3Jpb19wYXJ0aWxoYV9jdGUgOiAwLA0KICAgICAgICAgICAgIlZhbG9yRkNQVUZGaW0iOiBvYmoudmFsb3JfZmNwX3VmX2ZpbV9jdGUsDQogICAgICAgICAgICAiVmFsb3JJQ01TVUZGaW0iOiBvYmoudmFsb3JfaWNtc191Zl9maW1fY3RlLA0KICAgICAgICAgICAgIlZhbG9ySUNNU1VGSW5pIjogb2JqLnZhbG9yX2ljbXNfdWZfaW5pX2N0ZSwNCiAgICAgICAgICAgICJWYWxvclRvdGFsQ2FyZ2EiOiBvYmoudmFsb3JfdG90YWxfY2FyZ2FfY3RlLA0KICAgICAgICAgICAgIlByb2R1dG9QcmVkb21pbmFudGUiOiByZXRpcmFfYWNlbnRvcyhvYmouUFBUZGVzY3JpY2FvX2RvX3Byb2R1dG9fX3Byb2R1dG9fcHJlZG9taW5hbnRlX2N0ZSksDQogICAgICAgICAgICAiT3V0cmFzQ2FyYWN0ZXJpc3RjYXNDYXJnYSI6IG9iai5DQ0djYXJhY3RlcmlzdGljYV9kYV9jYXJnYV9fb3V0cmFzX2NhcmFjdGVyaXN0Y2FzX2NhcmdhX2N0ZSwNCiAgICAgICAgICAgICJDT1RNIjogb2JqLmNvdG1fY3RlLA0KICAgICAgICAgICAgIkluZGljYWRvck5lZ29jaWF2ZWwiOiBJbmRpY2Fkb3JOZWdvY2lhdmVsLA0KICAgICAgICAgICAgIk5vbWVTZWd1cmFkb3JhIjogb2JqLkVNUHJhemFvX3NvY2lhbF9lbXByZXNhLA0KICAgICAgICAgICAgIkNOUEpTZWd1cmFkb3JhIjogb2JqLkVNUGNucGpfZW1wcmVzYV9fY25wal9zZWd1cmFkb3JhX2N0ZSwNCiAgICAgICAgICAgICJOdW1lcm9BcG9saWNlIjogb2JqLm51bWVyb19hcG9saWNlX2N0ZSwNCiAgICAgICAgICAgICJOdW1lcm9BdmVyYmFjYW8iOiBvYmoubnVtZXJvX2F2ZXJiYWNhb19jdGUsDQogICAgICAgICAgICAiSW5mb3JtYWNvZXNBZGljaW9uYWlzRmlzY28iOiBvYmoubW90aXZvX2FudWxhY2FvX2N0ZSA/IG9iai5tb3Rpdm9fYW51bGFjYW9fY3RlIDogIiIsDQogICAgICAgICAgICAiQ2hhdmVDVGVPcmlnaW5hbEFTZXJBbnVsYWRvU3Vic3RpdHVpZG8iOiByZXRvcm5hX3NvbWVudGVudW1lcm9zKG9iai5jaGF2ZV9jdGVfY3RlKSwNCiAgICAgICAgICAgICJEYXRhRW1pc3Nhb0RlY2xhcmFjYW9Ub21hZG9yIjogZGF0YS5kYXRhX2RlX2VtaXNzYW9fZGFfZGVjbGFyYWNhb19kb190b21hZG9yX2N0ZSA/IGRhdGVUb1N0cmluZyhkYXRhLmRhdGFfZGVfZW1pc3Nhb19kYV9kZWNsYXJhY2FvX2RvX3RvbWFkb3JfY3RlKSA6IHV0aWxzLkdldFVzZXJEdE5vdygieXl5eS1NTS1kZCIpDQogICAgICAgIH07DQoNCiAgICAgICAgcmV0dXJuIGVudmlvY3RlT2JqdG1wOw0KICAgIH0gY2F0Y2ggKGVycikgew0KICAgICAgICBsZXQgT3JpZ2VtID0gIihFUlJPIC0gRW51bGFyIENURSkgZnVuY3Rpb24gQ3JpYU9iamV0b0FudWxhY2FvQ3RlIg0KICAgICAgICBsZXQgY29udGVudCA9IHsNCiAgICAgICAgICAgICJtZW5zYWdlbSI6IGVyci5tZXNzYWdlLA0KICAgICAgICAgICAgInBpbGhhIjogZXJyLnN0YWNrDQogICAgICAgIH0NCiAgICAgICAgb25lcmd5LmxvZyhKU09OLnN0cmluZ2lmeShjb250ZW50KSwgT3JpZ2VtKTsNCg0KICAgICAgICBsZXQgb2JqQ2FsbEJhY2sgPSB7DQogICAgICAgICAgICAnc3RhdHVzJzogJ05PSycsDQogICAgICAgICAgICAnbmV4dCc6IGZhbHNlDQogICAgICAgIH0NCiAgICAgICAgYXdhaXQgYnVzY2FyTnVtZXJhY2FvKG9iaiwgRW1pc3NvclswXS5JRCwgdHJ1ZSwgb2JqQ2FsbEJhY2spOw0KICAgICAgICByZXR1cm4gbnVsbDsNCiAgICB9DQp9DQovL2FxdWkNCg0KDQphc3luYyBmdW5jdGlvbiBFZmV0dWFNZW5zYWdlcmlhKG9iaiwgb2JqZW52aW8sIHRva2VuT2JqLCBnbnVybCkgew0KDQogICAgbGV0IHJldG9ybm87DQogICAgYXdhaXQgYXhpb3Moew0KICAgICAgICB1cmw6IGdudXJsLA0KICAgICAgICBtZXRob2Q6ICdQT1NUJywNCiAgICAgICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJywNCiAgICAgICAgaGVhZGVyczogew0KICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAnYmVhcmVyICcgKyB0b2tlbk9iai50b2tlbg0KICAgICAgICB9LA0KICAgICAgICBkYXRhOiBvYmplbnZpbywNCiAgICB9KS50aGVuKChyZXNwb25zZSkgPT4gew0KICAgICAgICByZXRvcm5vID0gcmVzcG9uc2UuZGF0YTsNCiAgICB9LCAoZXJyb3IpID0+IHsNCiAgICAgICAgcmV0b3JubyA9IGVycm9yLnJlc3BvbnNlLmRhdGENCiAgICB9KTsNCiAgICByZXR1cm4gcmV0b3Jubw0KDQogICAgLyoNCiAgICBsZXQgc3RyUmVzcENUZSA9ICIiOw0KICAgIGFqYXgoew0KICAgICAgICB1cmw6IGdudXJsLA0KICAgICAgICBtZXRob2Q6ICdQT1NUJywNCiAgICAgICAgYXN5bmM6IGZhbHNlLA0KICAgICAgICBjb250ZW50VHlwZTogImFwcGxpY2F0aW9uL2pzb24iLA0KICAgICAgICBhc3NpZDogb2JqLmFzc2lkLA0KICAgICAgICB1c3JpZDogb2JqLnVzcmlkLA0KICAgICAgICBmZWRpZDogb2JqLmZlZGlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShvYmplbnZpbyksDQogICAgICAgIGF1dGhvcml6YXRpb246IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgIHR5cGU6ICJiZWFyZXIiLA0KICAgICAgICAgICAgdmFsdWU6IHRva2VuT2JqLnRva2VuDQogICAgICAgIH0pLA0KICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbihkYXRhLCB0ZXh0U3RhdHVzLCBqcVhIUikgew0KICAgICAgICAgICAgc3RyUmVzcENUZSA9IGRhdGE7DQogICAgICAgIH0sDQogICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgZXhjZXB0aW9uKSB7DQogICAgICAgICAgICBzdHJSZXNwQ1RlID0gZXhjZXB0aW9uOw0KICAgICAgICB9DQogICAgfSk7DQogICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyUmVzcENUZSk7DQogICAgKi8NCg0KfQ0KDQphc3luYyBmdW5jdGlvbiBHcmF2YUV2ZW50byhwSURfT05FX1JFRiwgdGlwb2V2ZW50bywgcHByb3RvY29sbywgcGNoYXZlLCBwYXNzaWQsIHB1c3JpZCkgew0KICAgIGxldCBmZHRfZXZlbnRvID0gIjRkNjI0ODkzLWJiM2MtNGRkZi04MmVlLWE3OTE4ZjU2MmExMSI7DQogICAgbGV0IG9iamV2ZW50byA9IHsNCiAgICAgICAgSURfT05FX1JFRjogcElEX09ORV9SRUYsDQogICAgICAgIGRhdGFob3JhX2RvX2V2ZW50b19jdGU6IHV0aWxzLkdldFVzZXJEdE5vdygieXl5eS1NTS1kZCBISDptbTpzcyIpLA0KICAgICAgICB0aXBvX2RvX2V2ZW50b19jdGU6IHRpcG9ldmVudG8sDQogICAgICAgIHByb3RvY29sb19ldmVudG9fY3RlOiBwcHJvdG9jb2xvLA0KICAgICAgICBjaGF2ZV9ldmVudG9fY3RlOiBwY2hhdmUNCiAgICB9Ow0KICAgIGF3YWl0IHNlbmRJdGVtVG9PbmVyZ3koZmR0X2V2ZW50bywgcGFzc2lkLCBwdXNyaWQsIG9iamV2ZW50byk7DQogICAgcmV0dXJuDQp9DQoNCmFzeW5jIGZ1bmN0aW9uIHNlbmRJdGVtVG9PbmVyZ3kodGVtcGxhdGVpZCwgYXNzaWQsIHVzcmlkLCBkYXRhLCBmZWRpZCwgdWtGaWVsZCkgew0KICAgIGxldCBvbmVyZ3lTYXZlRGF0YSA9IHsNCiAgICAgICAgZmR0aWQ6IHRlbXBsYXRlaWQsDQogICAgICAgIGFzc2lkOiBhc3NpZCwNCiAgICAgICAgdXNyaWQ6IHVzcmlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKQ0KICAgIH0NCg0KICAgIGlmIChmZWRpZCAhPT0gdW5kZWZpbmVkICYmIGZlZGlkICE9PSAnJykgew0KICAgICAgICBvbmVyZ3lTYXZlRGF0YS5pZCA9IGZlZGlkOw0KICAgIH0NCiAgICBpZiAodWtGaWVsZCAhPT0gdW5kZWZpbmVkICYmIHVrRmllbGQgIT09ICcnKSB7DQogICAgICAgIG9uZXJneVNhdmVEYXRhLnVrRmllbGQgPSB1a0ZpZWxkOw0KICAgIH0NCiAgICByZXR1cm4gYXdhaXQgb25lcmd5X3NhdmUob25lcmd5U2F2ZURhdGEpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBnZXRPbmVyZ3lJdGVtKGZkdGlkLCBhc3NpZCwgdXNyaWQsIGZpbHRybykgew0KICAgIGxldCBzdHJSZXNwID0gYXdhaXQgb25lcmd5X2dldCh7DQogICAgICAgIGZkdGlkOiBmZHRpZCwNCiAgICAgICAgYXNzaWQ6IGFzc2lkLA0KICAgICAgICB1c3JpZDogdXNyaWQsDQogICAgICAgIGZpbHRlcjogZmlsdHJvDQogICAgfSk7DQogICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyUmVzcCk7DQp9DQoNCmZ1bmN0aW9uIHJldG9ybmFfc29tZW50ZW51bWVyb3Moc3RycmVjKSB7DQogICAgbGV0IHN0cnJldCA9IHN0cnJlYy50b1N0cmluZygpLnJlcGxhY2UoL1teXGRdKy9nLCAnJywgJycpOw0KICAgIHJldHVybiBzdHJyZXQ7DQp9DQoNCmZ1bmN0aW9uIHJldGlyYV9hY2VudG9zKHN0cikgew0KICAgIGxldCBjb21fYWNlbnRvID0gIsOAw4HDgsODw4TDhcOGw4fDiMOJw4rDi8OMw43DjsOPw5DDkcOSw5PDlMOVw5bDmMOZw5rDm8Ocw53FlMOew5/DoMOhw6LDo8Okw6XDpsOnw6jDqcOqw6vDrMOtw67Dr8Oww7HDssOzw7TDtcO2w7jDucO6w7vDvMO9w77Dv8WVIjsNCiAgICBsZXQgc2VtX2FjZW50byA9ICJBQUFBQUFBQ0VFRUVJSUlJRE5PT09PT09VVVVVWVJzQmFhYWFhYWFjZWVlZWlpaWlvbm9vb29vb3V1dXV5YnlyIjsNCiAgICBsZXQgbm92YXN0ciA9ICIiOw0KICAgIGlmIChzdHIpIHsNCiAgICAgICAgZm9yIChpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykgew0KICAgICAgICAgICAgdHJvY2EgPSBmYWxzZTsNCiAgICAgICAgICAgIGZvciAoYSA9IDA7IGEgPCBjb21fYWNlbnRvLmxlbmd0aDsgYSsrKSB7DQogICAgICAgICAgICAgICAgaWYgKHN0ci5zdWJzdHIoaSwgMSkgPT0gY29tX2FjZW50by5zdWJzdHIoYSwgMSkpIHsNCiAgICAgICAgICAgICAgICAgICAgbm92YXN0ciArPSBzZW1fYWNlbnRvLnN1YnN0cihhLCAxKTsNCiAgICAgICAgICAgICAgICAgICAgdHJvY2EgPSB0cnVlOw0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICB9DQogICAgICAgICAgICBpZiAodHJvY2EgPT09IGZhbHNlKSB7DQogICAgICAgICAgICAgICAgbm92YXN0ciArPSBzdHIuc3Vic3RyKGksIDEpOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiBub3Zhc3RyOw0KfQ0KDQpmdW5jdGlvbiByZXRpcmFlc3BhY29zKHN0cmNvbWVzcGFjbykgew0KICAgIGxldCBzdHJzZW1lc3BhY28gPSBzdHJjb21lc3BhY28udG9TdHJpbmcoKS5yZXBsYWNlKC9ccy9nLCAnJyk7DQogICAgcmV0dXJuIHN0cnNlbWVzcGFjbzsNCn0NCg0KZnVuY3Rpb24gQ3JpYU9iamV0b0dyYXZhY2FvQ1RlQW51bGFjYW8oZGF0YSwgb2Jqb3JpZ2luYWwsIG9iamVtaXRpZG8pIHsNCiAgICBsZXQgb2JqQ1RFQW51bGFkYSA9IEpTT04uc3RyaW5naWZ5KG9iam9yaWdpbmFsKTsNCiAgICBvYmpDVEVBbnVsYWRhID0gSlNPTi5wYXJzZShvYmpDVEVBbnVsYWRhKTsNCiAgICBsZXQgZ25DRk9QID0gIiI7DQogICAgbGV0IElkQ0ZPUCA9ICIiOw0KICAgIGxldCBEZXNjckNGT1AgPSAiQW51bGHDp8OjbyBkZSB2YWxvciByZWxhdGl2byDDoCBwcmVzdGHDp8OjbyBkZSBzZXJ2acOnbyBkZSB0cmFuc3BvcnRlIjsNCiAgICBpZiAob2Jqb3JpZ2luYWwuRU1QTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2FfX3JlbWV0ZW50ZV91Zl9sb2dyYWRvdXJvX2N0ZSA9PT0gb2Jqb3JpZ2luYWwuRU1QTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2FfX2Rlc3RpbmF0YXJpb191Zl9sb2dyYWRvdXJvX2N0ZSkgew0KICAgICAgICBnbkNGT1AgPSAiMTIwNiI7DQogICAgICAgIElkQ0ZPUCA9ICJjZmRiY2NlNi1jNWZiLTQxODYtOWQ4NC0xMGVlNzg4YjI0M2MiOw0KICAgIH0gZWxzZSB7DQogICAgICAgIGduQ0ZPUCA9ICIyMjA2IjsNCiAgICAgICAgSWRDRk9QID0gIjEzZDhhYTdkLWM1NmMtNDM0Yi05Y2IwLWM2N2I5NzI4NmNiMiI7DQogICAgfQ0KDQogICAgdmFyIGZpbGV0ZW1wID0gIiI7IC8vZmlsZXV0aWxzLkNyZWF0ZUZpbGUob2JqZW1pdGlkby5vYmpzLmpzb25BdXRvcml6YWRvLCAiLnhtbCIpOw0KICAgIHZhciB1cmx4bWwgPSAiIjsgLy9maWxldXRpbHMuVXBsb2FkRmlsZShmaWxldGVtcCk7DQogICAgdmFyIGpzb25jdGUgPSAie30iOyAvL2ZpbGV1dGlscy5Db252ZXJ0WG1sVXJsVG9Kc29uKHVybHhtbCk7DQoNCiAgICBvYmpDVEVBbnVsYWRhLnBvc3N1aV9kZWNsYXJhY2FvID0gZGF0YS5wb3NzdWlfZGVjbGFyYWNhbzsNCiAgICBvYmpDVEVBbnVsYWRhLnBvc3N1aV9kZWNsYXJhY2FvX2Rlc2MgPSBkYXRhLnBvc3N1aV9kZWNsYXJhY2FvX2Rlc2M7DQogICAgb2JqQ1RFQW51bGFkYS51cmxfcGRmX2N0ZSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEubG9nX21vdG9yX2RlX2NhbGN1bG8gPSAiIjsNCiAgICBvYmpDVEVBbnVsYWRhLm1vdGl2b19hbnVsYWNhb19jdGUgPSBkYXRhLm1vdGl2b19hbnVsYWNhb19jdGU7DQogICAgb2JqQ1RFQW51bGFkYS5udW1lcm9fY3RlX2FudWxhZG9fY3RlID0gb2Jqb3JpZ2luYWwubnVtZXJvX2N0ZV9jdGU7DQogICAgb2JqQ1RFQW51bGFkYS5zZXJpZV9jdGVfYW51bGFkb19jdGUgPSBvYmpvcmlnaW5hbC5zZXJpZV9jdGVfY3RlOw0KICAgIG9iakNURUFudWxhZGEuY2hhdmVfZG9fY3RlX2FudWxhZG9fY3RlID0gcmV0b3JuYV9zb21lbnRlbnVtZXJvcyhvYmpvcmlnaW5hbC5jaGF2ZV9jdGVfY3RlKTsNCiAgICBvYmpDVEVBbnVsYWRhLmRhdGFfZGVfZW1pc3Nhb19kYV9kZWNsYXJhY2FvX2RvX3RvbWFkb3JfY3RlID0gZGF0YS5kYXRhX2RlX2VtaXNzYW9fZGFfZGVjbGFyYWNhb19kb190b21hZG9yX2N0ZTsNCiAgICBvYmpDVEVBbnVsYWRhLmRhdGFfZGVfZW1pc3Nhb19kYV9kZWNsYXJhY2FvX2RvX3RvbWFkb3JfY3RlRGF0ZSA9IGRhdGEuZGF0YV9kZV9lbWlzc2FvX2RhX2RlY2xhcmFjYW9fZG9fdG9tYWRvcl9jdGVEYXRlOw0KICAgIG9iakNURUFudWxhZGEubW90aXZvX2FudWxhY2FvX2N0ZSA9IGRhdGEubW90aXZvX2FudWxhY2FvX2N0ZTsNCiAgICBvYmpDVEVBbnVsYWRhLmNoYXZlX2N0ZV9jdGUgPSBvYmplbWl0aWRvLm9ianMuY2hhdmVBY2Vzc29DVGU7DQogICAgb2JqQ1RFQW51bGFkYS5udW1lcm9fY3RlX2N0ZSA9IG9iamVtaXRpZG8ub2Jqcy5udW1lcm9DVGU7DQogICAgb2JqQ1RFQW51bGFkYS5zZXJpZV9jdGVfY3RlID0gb2JqZW1pdGlkby5vYmpzLnNlcmllQ1RlOw0KICAgIG9iakNURUFudWxhZGEuZGF0YV9lbWlzc2FvX2N0ZURhdGUgPSBvYmplbWl0aWRvLm9ianMuZGF0YUVtaXNzYW87DQogICAgb2JqQ1RFQW51bGFkYS5kYXRhX2VtaXNzYW9fY3RlID0gb2JqZW1pdGlkby5vYmpzLmRhdGFFbWlzc2FvOw0KICAgIG9iakNURUFudWxhZGEuc3RhdHVzX2N0ZV9jdGUgPSAnZW1pdGlkbyc7DQogICAgb2JqQ1RFQW51bGFkYS5zdGF0dXNfY3RlX2N0ZV9kZXNjID0gJ0VtaXRpZG8nOw0KICAgIG9iakNURUFudWxhZGEuZmluYWxpZGFkZV9lbWlzc2FvX2N0ZV9jdGUgPSBvYmplbWl0aWRvLm9ianMuZmluYWxpZGFkZUVtaXNzYW9DVGUudG9Mb3dlckNhc2UoKTsNCiAgICBvYmpDVEVBbnVsYWRhLmZpbmFsaWRhZGVfZW1pc3Nhb19jdGVfY3RlX2Rlc2MgPSBvYmplbWl0aWRvLm9ianMuZmluYWxpZGFkZUVtaXNzYW9DVGU7DQogICAgb2JqQ1RFQW51bGFkYS5DRk9QX2Nmb3BfY3RlX2lkID0gSWRDRk9QOw0KICAgIG9iakNURUFudWxhZGEuQ0ZPUF9jb2RpZ29fY2ZvcF9fY2ZvcF9jdGUgPSBnbkNGT1A7DQogICAgb2JqQ1RFQW51bGFkYS5DRk9QX2Rlc2NyaWNhb19jZm9wID0gRGVzY3JDRk9QOw0KICAgIG9iakNURUFudWxhZGEuQ1RFR2VyYWRhUGFyYU1ERkUgPSAnbmFvJzsNCiAgICBvYmpDVEVBbnVsYWRhLmpzb25fYXV0b3JpemFjYW9fc2VmYXpfY3RlID0gIiI7DQogICAgb2JqQ1RFQW51bGFkYS5jYXJhY3RlcmlzdGljYXNfYWRfdHJhbnNwb3J0ZV9jdGUgPSAiTkFPU0VMRUNJT05BRE8iOw0KICAgIG9iakNURUFudWxhZGEuY2FyYWN0ZXJpc3RpY2FzX2FkX3RyYW5zcG9ydGVfY3RlX2Rlc2MgPSAiTsOjbyBTZWxlY2lvbmFkbyI7DQogICAgb2JqQ1RFQW51bGFkYS5hbmV4b19hbnVsYWNhb19jdGUgPSBkYXRhLmFuZXhvX2FudWxhY2FvX2N0ZTsNCiAgICBvYmpDVEVBbnVsYWRhLm51bWVyb19jdGVfb3JpZ2luYWxfY3RlID0gb2Jqb3JpZ2luYWwubnVtZXJvX2N0ZV9jdGU7DQogICAgb2JqQ1RFQW51bGFkYS5zZXJpZV9jdGVfb3JpZ2luYWxfY3RlID0gb2Jqb3JpZ2luYWwuc2VyaWVfY3RlX2N0ZTsNCiAgICBvYmpDVEVBbnVsYWRhLmNoYXZlX2N0ZV9vcmlnaW5hbF9jdGUgPSBvYmpvcmlnaW5hbC5jaGF2ZV9jdGVfY3RlOw0KICAgIG9iakNURUFudWxhZGEuY2hhdmVfY3RlX2VtaXRpZGFfcGVsb190b21hZG9yX2N0ZSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEuY2hhdmVfbmZlX2VtaXRpZGFfcGVsb190b21hZG9yX2N0ZSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEuVFBSY29kaWdvX3Rwcl9fdGFiZWxhX2RlX3ByZWNvX2l0ZW5zID0gW107DQogICAgb2JqQ1RFQW51bGFkYS5UUFJpdGVuc190YWJlbGFfZGVfcHJlY29faWQgPSBbXTsNCiAgICBvYmpDVEVBbnVsYWRhLlRQUmRlc2NyaWNhb19faXRlbnNfdGFiZWxhX2RlX3ByZWNvID0gW107DQogICAgb2JqQ1RFQW51bGFkYS5UUFJkZXNjcmljYW9fdHByX190YWJlbGFfZGVfcHJlY28gPSAiIjsNCiAgICBvYmpDVEVBbnVsYWRhLlRQUnRhYmVsYV9kZV9wcmVjb19pZCA9ICIiOw0KICAgIG9iakNURUFudWxhZGEudXJsX3htbCA9IHVybHhtbDsNCiAgICBvYmpDVEVBbnVsYWRhLmd1aWFzX2Rvb3RheCA9ICIiOw0KICAgIG9iakNURUFudWxhZGEuaW5mb3JtYXIgPSAiIjsNCiAgICBvYmpDVEVBbnVsYWRhLmluZm9ybWFyX2Rlc2MgPSAiIjsNCiAgICBvYmpDVEVBbnVsYWRhLmxvZ19jdGUgPSAnJzsNCiAgICBvYmpDVEVBbnVsYWRhLmFycXVpdm9fZ25yZSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEudXJsR05SRSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEucGFnYW1lbnRvR05SRSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEucHJvdG9jb2xvX2N0ZV9jdGUgPSBvYmplbWl0aWRvLm9ianMucHJvdG9jb2xvQXV0b3JpemFjYW87DQogICAgb2JqQ1RFQW51bGFkYS5PVlNGZGF0YV9kZV9mYXR1cmFtZW50b19vcmRlbV9kZV92ZW5kYSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEuT1ZTRmRhdGFfZGVfdmVuY2ltZW50b19kYV9wYXJjZWxhID0gIiI7DQogICAgb2JqQ1RFQW51bGFkYS5PVlNGbnVtZXJvX29yZGVtX2RlX3ZlbmRhID0gIiI7DQogICAgb2JqQ1RFQW51bGFkYS5PVlNGbnVtZXJvX29yZGVtX2RlX3ZlbmRhX19vcmRlbV9kZV92ZW5kYSA9ICIiOw0KICAgIG9iakNURUFudWxhZGEuT1ZTRnNmX292X2lkID0gIiI7DQogICAgb2JqQ1RFQW51bGFkYS5mYXR1cmFtZW50b19wZW5kZW50ZSA9ICJuYW8iOw0KICAgIG9iakNURUFudWxhZGEuZmF0dXJhbWVudG9fcGVuZGVudGVfZGVzYyA9ICJOw6NvIjsNCiAgICBvYmpDVEVBbnVsYWRhLmZhdHVyYWRvX2N0ZSA9ICJuYW8iOw0KICAgIG9iakNURUFudWxhZGEuZmF0dXJhZG9fY3RlX2Rlc2MgPSAiTsOjbyI7DQogICAgb2JqQ1RFQW51bGFkYS5udW1lcm9fZGFfZmF0dXJhX2N0ZSA9IDA7DQogICAgb2JqQ1RFQW51bGFkYS52YWxvcl9vcmlnaW5hbF9mYXR1cmFfY3RlID0gMDsNCiAgICBvYmpDVEVBbnVsYWRhLnZhbG9yX2Rlc2NvbnRvX2ZhdHVyYV9jdGUgPSAwOw0KICAgIG9iakNURUFudWxhZGEudmFsb3JfbGlxdWlkb19mYXR1cmFfY3RlID0gMDsNCg0KICAgIHJldHVybiBvYmpDVEVBbnVsYWRhOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBFbnZpYXJFbWFpbFNJUyhkYXRhLCBUZW1wbGF0ZUVtYWlsLCB1cmxYTUwsIEZpbmFsaWRhZGUsIG51bWVyb0NURSwgY29udGV1ZG8pIHsNCiAgICBsZXQgZW1pc3Nhb0RlQ1RFRW1haWxJRCA9IFRlbXBsYXRlRW1haWw7DQogICAgbGV0IGVtYWlsU2lzID0gb25lcmd5LkdldFN1YnNjcmlwdGlvbkNvbmZpZygiZW1haWxfU0lTIik7DQogICAgbGV0IGNvbnRldWRvSUQgPSBudWxsOw0KICAgIHZhciB0ZW1wbGF0ZUNvbnRldWRvRW1haWwgPSAnMTcwZDdkZDEtZDQyZS00MDY0LWFjZjktOWE3YzcyMjYxYWNjJzsNCiAgICAvLyBzZSBvIGVtYWlsIHRpdmVyIGNvbnRlw7pkbywgZXUgc2Fsdm8gZW0gdW0gdGVtcGxhdGUgcGFyYSBzZXIgdXNhZG8gbm8gZW1haWwuDQogICAgaWYgKGNvbnRldWRvKSB7DQogICAgICAgIGNvbnRldWRvSUQgPSBhd2FpdCBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlQ29udGV1ZG9FbWFpbCwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIGNvbnRldWRvKTsNCiAgICB9DQoNCiAgICBsZXQgQW5leG9zID0gW3sNCiAgICAgICAgIlVybCI6IHVybFhNTCwNCiAgICAgICAgIlVybEF6dXJlIjogdXJsWE1MLA0KICAgICAgICAiTmFtZSI6IGBYTUxfJHtGaW5hbGlkYWRlfV9DVEVfJHtudW1lcm9DVEV9LnhtbGANCiAgICB9XTsNCg0KICAgIGF3YWl0IHNlbmRtYWlsKHsNCiAgICAgICAgYXNzaWQ6IGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwNCiAgICAgICAgdXNyaWQ6IGRhdGEub25lcmd5X2pzX2N0eC51c3JpZCwNCiAgICAgICAgaWQ6IGNvbnRldWRvSUQsDQogICAgICAgIHRtcGlkOiBlbWlzc2FvRGVDVEVFbWFpbElELA0KICAgICAgICBlbWFpbF90bzogZW1haWxTaXMsDQogICAgICAgIGxzdEFuZXhvczogSlNPTi5zdHJpbmdpZnkoQW5leG9zKQ0KICAgIH0pOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBidXNjYXJOdW1lcmFjYW8oZGF0YSwgZXN0YWJlbGVjaW1lbnRvLCBjYWxsYmFjaywgY2FsbGJhY2tPQkopIHsNCiAgICBsZXQgZXN0YWJlbGVjaW1lbnRvVGVtcGxhdGUgPSAiMjM4YWJkOGQtY2UxYi00ZGNlLTgwY2YtYmM3ZGVlOTJmOGNmIjsNCiAgICBpZiAoIWNhbGxiYWNrKSB7DQogICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgMzA7IHMrKykgew0KICAgICAgICAgICAgbGV0IGV4aXN0ID0gbWVtb3J5LlRyeUFkZCgiQ0hBVkUiLCAiVkFMT1IiLCAyMCk7DQogICAgICAgICAgICBpZiAoZXhpc3QgfHwgcyA9PSAyOSkgew0KICAgICAgICAgICAgICAgIGxldCBGaWx0cm9VbmlkYWRlRW1pc3NhbyA9IEpTT04uc3RyaW5naWZ5KFt7IEZpZWxOYW1lOiAiX2lkIiwgVHlwZTogInN0cmluZyIsIEZpeGVkVHlwZTogInN0cmluZyIsIFZhbHVlMTogZXN0YWJlbGVjaW1lbnRvIH1dKTsNCiAgICAgICAgICAgICAgICBsZXQgb2JqRXN0YWJlbGVjaW1lbnRvID0gYXdhaXQgZ2V0T25lcmd5SXRlbShlc3RhYmVsZWNpbWVudG9UZW1wbGF0ZSwgZGF0YS5hc3NpZCwgZGF0YS51c3JpZCwgRmlsdHJvVW5pZGFkZUVtaXNzYW8pOw0KICAgICAgICAgICAgICAgIGF3YWl0IG9uZXJneV91cGRhdGVtYW55KHsNCiAgICAgICAgICAgICAgICAgICAgZmR0aWQ6IGVzdGFiZWxlY2ltZW50b1RlbXBsYXRlLA0KICAgICAgICAgICAgICAgICAgICBhc3NpZDogZGF0YS5hc3NpZCwNCiAgICAgICAgICAgICAgICAgICAgdXNyaWQ6IGRhdGEudXNyaWQsDQogICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICAgICAgICAgICJVcmxKc29uQ29udGV4dCI6IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzX251bWVyb19jdGUnOiAncHJvY2Vzc2FuZG8nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbnVtZXJvX2N0ZV9kZXNjJzogJ1BST0NFU1NBTkRPJw0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KSwNCiAgICAgICAgICAgICAgICAgICAgaWQ6IGVzdGFiZWxlY2ltZW50bw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAgICAgICAgICdOdW1lcm8nOiBvYmpFc3RhYmVsZWNpbWVudG9bMF0uVXJsSnNvbkNvbnRleHQubnVtZXJvX3NlcXVlbmNpYWxfZG9fY3RlLA0KICAgICAgICAgICAgICAgICAgICAnU2VyaWUnOiBvYmpFc3RhYmVsZWNpbWVudG9bMF0uVXJsSnNvbkNvbnRleHQubnVtZXJvX2RhX3NlcmllX2RvX2N0ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgdXRpbHMuc2xlZXAoNTAwMCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICBpZiAoY2FsbGJhY2tPQkouc3RhdHVzID09ICdPSycpIHsNCiAgICAgICAgICAgIGF3YWl0IG9uZXJneV91cGRhdGVtYW55KHsNCiAgICAgICAgICAgICAgICBmZHRpZDogZXN0YWJlbGVjaW1lbnRvVGVtcGxhdGUsDQogICAgICAgICAgICAgICAgYXNzaWQ6IGRhdGEuYXNzaWQsDQogICAgICAgICAgICAgICAgdXNyaWQ6IGRhdGEudXNyaWQsDQogICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoew0KICAgICAgICAgICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzX251bWVyb19jdGUnOiAnZGlzcG9uaXZlbCcsDQogICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzX251bWVyb19jdGVfZGVzYyc6ICdESVNQT07DjVZFTCcsDQogICAgICAgICAgICAgICAgICAgICAgICAnbnVtZXJvX3NlcXVlbmNpYWxfZG9fY3RlJzogY2FsbGJhY2tPQkoubnVtZXJvICsgMQ0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgfSksDQogICAgICAgICAgICAgICAgaWQ6IGVzdGFiZWxlY2ltZW50bw0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgICBtZW1vcnkuUmVtb3ZlKGVzdGFiZWxlY2ltZW50byk7DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICBpZiAoY2FsbGJhY2tPQkoubmV4dCkgew0KICAgICAgICAgICAgICAgIG9iakVzdGFiZWxlY2ltZW50byA9IGF3YWl0IGdldE9uZXJneUl0ZW0oZXN0YWJlbGVjaW1lbnRvVGVtcGxhdGUsIGRhdGEuYXNzaWQsIGRhdGEudXNyaWQsIEZpbHRyb1VuaWRhZGVFbWlzc2FvKTsNCiAgICAgICAgICAgICAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgICAgICAgICAgICAgIGZkdGlkOiBlc3RhYmVsZWNpbWVudG9UZW1wbGF0ZSwNCiAgICAgICAgICAgICAgICAgICAgYXNzaWQ6IGRhdGEuYXNzaWQsDQogICAgICAgICAgICAgICAgICAgIHVzcmlkOiBkYXRhLnVzcmlkLA0KICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICAgICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ251bWVyb19zZXF1ZW5jaWFsX2RvX2N0ZSc6IG9iakVzdGFiZWxlY2ltZW50b1swXS5VcmxKc29uQ29udGV4dC5udW1lcm9fc2VxdWVuY2lhbF9kb19jdGUgKyAxDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pLA0KICAgICAgICAgICAgICAgICAgICBpZDogZXN0YWJlbGVjaW1lbnRvDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICAgICAgICAgJ051bWVybyc6IG9iakVzdGFiZWxlY2ltZW50b1swXS5VcmxKc29uQ29udGV4dC5udW1lcm9fc2VxdWVuY2lhbF9kb19jdGUgKyAxLA0KICAgICAgICAgICAgICAgICAgICAnU2VyaWUnOiBvYmpFc3RhYmVsZWNpbWVudG9bMF0uVXJsSnNvbkNvbnRleHQubnVtZXJvX2RhX3NlcmllX2RvX2N0ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2FsbGJhY2tPQkouRHVwbGljaWRhZGUpIHsNCiAgICAgICAgICAgICAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgICAgICAgICAgICAgIGZkdGlkOiBlc3RhYmVsZWNpbWVudG9UZW1wbGF0ZSwNCiAgICAgICAgICAgICAgICAgICAgYXNzaWQ6IGRhdGEuYXNzaWQsDQogICAgICAgICAgICAgICAgICAgIHVzcmlkOiBkYXRhLnVzcmlkLA0KICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICAgICAgICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXR1c19udW1lcm9fY3RlJzogJ2Rpc3Bvbml2ZWwnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbnVtZXJvX2N0ZV9kZXNjJzogJ0RJU1BPTsONVkVMJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtZXJvX3NlcXVlbmNpYWxfZG9fY3RlJzogY2FsbGJhY2tPQkoubnVtZXJvICsgMQ0KICAgICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICB9KSwNCiAgICAgICAgICAgICAgICAgICAgaWQ6IGVzdGFiZWxlY2ltZW50bw0KICAgICAgICAgICAgICAgIH0pOw0KICAgICAgICAgICAgICAgIG1lbW9yeS5SZW1vdmUoZXN0YWJlbGVjaW1lbnRvKTsNCiAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgYXdhaXQgb25lcmd5X3VwZGF0ZW1hbnkoew0KICAgICAgICAgICAgICAgICAgICBmZHRpZDogZXN0YWJlbGVjaW1lbnRvVGVtcGxhdGUsDQogICAgICAgICAgICAgICAgICAgIGFzc2lkOiBkYXRhLmFzc2lkLA0KICAgICAgICAgICAgICAgICAgICB1c3JpZDogZGF0YS51c3JpZCwNCiAgICAgICAgICAgICAgICAgICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoew0KICAgICAgICAgICAgICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGF0dXNfbnVtZXJvX2N0ZSc6ICdkaXNwb25pdmVsJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3RhdHVzX251bWVyb19jdGVfZGVzYyc6ICdESVNQT07DjVZFTCcsDQogICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgIH0pLA0KICAgICAgICAgICAgICAgICAgICBpZDogZXN0YWJlbGVjaW1lbnRvDQogICAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICAgICAgbWVtb3J5LlJlbW92ZShlc3RhYmVsZWNpbWVudG8pOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KLy9UT0RPIERBVEENCnZhciBqc29uSW5wdXQgPSB7DQogICAgIm1vdGl2b19hbnVsYWNhb19jdGUiOiAiYXNkYXNkIGFzZGFzZGEgc2Rhc2Rhc2RhIHNhZGFzZGFzZGFzIHNhZGFzZGEiLA0KICAgICJwb3NzdWlfZGVjbGFyYWNhbyI6ICJzaW0iLA0KICAgICJwb3NzdWlfZGVjbGFyYWNhb19kZXNjIjogIlNpbSIsDQogICAgImFuZXhvX2FudWxhY2FvX2N0ZSI6IFt7DQogICAgICAgICJVcmwiOiAiaHR0cHM6Ly9vbmViYWNrdXBzZXJ2aWNlcy5ibG9iLmNvcmUud2luZG93cy5uZXQvMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1LzU1ODA3M2JhLWE5NTUtNDU2Yy04M2IzLWI0MDA4YzhlYjBjMmFwaS1ndWlkZS5odG1sLmh0bWw/c3Y9MjAxOC0wMy0yOCZzcj1iJnNpZz1HTUZrcFRIakx5SjFZc1BsR0tYMVhBRUZlOGVKQURHbUNQUWE4cVB6RkljJTNEJnNlPTIwMjItMTItMTJUMTglM0ExNSUzQTM0WiZzcD1yIiwNCiAgICAgICAgIlVybEF6dXJlIjogImh0dHBzOi8vb25lYmFja3Vwc2VydmljZXMuYmxvYi5jb3JlLndpbmRvd3MubmV0LzBhYWMwMTQ4LTBlN2QtNGFiYy1hMDc3LTZhMzBhOWUwZjNlNS81NTgwNzNiYS1hOTU1LTQ1NmMtODNiMy1iNDAwOGM4ZWIwYzJhcGktZ3VpZGUuaHRtbC5odG1sP3N2PTIwMTgtMDMtMjgmc3I9YiZzaWc9R01Ga3BUSGpMeUoxWXNQbEdLWDFYQUVGZThlSkFER21DUFFhOHFQekZJYyUzRCZzZT0yMDIyLTEyLTEyVDE4JTNBMTUlM0EzNFomc3A9ciIsDQogICAgICAgICJOYW1lIjogImFwaS1ndWlkZS5odG1sIg0KICAgIH1dLA0KICAgICJkYXRhX2RlX2VtaXNzYW9fZGFfZGVjbGFyYWNhb19kb190b21hZG9yX2N0ZURhdGUiOiAiMjAyMi0wNS0yNiAwMzowMDowMCIsDQogICAgImRhdGFfZGVfZW1pc3Nhb19kYV9kZWNsYXJhY2FvX2RvX3RvbWFkb3JfY3RlIjogIjIwMjItMDUtMjYgMDA6MDA6MDAiLA0KICAgICJuZmVfYW51bGFjYW9fY3RlIjogIiIsDQogICAgIklEX09ORV9SRUYiOiAiZTlkMjE1ZGItNGIyNS00ODNiLWFhNzItYzFlZjZhNGE5OTQ1IiwNCiAgICAib25lVGVtcGxhdGVUaXRsZSI6ICIiLA0KICAgICJhc3NfaWQiOiAiMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1IiwNCiAgICAiYXNzaWQiOiAiMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1IiwNCiAgICAiZW1haWwiOiAiZGVzZW52QHByZXN0ZXguY29tLmJyIiwNCiAgICAiZmR0aWQiOiAiM2RjOWM2MzUtMWZkZS00ODJmLTlmYmYtZTUyYjFjMDE2MjE0IiwNCiAgICAiZmVkaWQiOiAiNjcyZGY0ZDEtZDljYi01Y2NiLTM4NzUtNmJjMzA5NTZlN2Q1IiwNCiAgICAib25lcmd5X3JvbGlkIjogIiIsDQogICAgInRpbWV6b25lIjogbnVsbCwNCiAgICAidXNyaWQiOiAiODczN2JlYmUtMDFhNC00NDkzLWE4ZGItNDMzNmViNTViNWIzIg0KfQ0KDQoNCmpzb25JbnB1dC5vbmVyZ3lfanNfY3R4ID0gew0KICAgICJhc3NfaWQiOiAiMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1IiwNCiAgICAiYXNzaWQiOiAiMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1IiwNCiAgICAiZW1haWwiOiAiZGVzZW52QHByZXN0ZXguY29tLmJyIiwNCiAgICAiZmR0aWQiOiAiYmQyNzgzN2ItZDkyOS00NzdjLTlkZTMtNjUzZGZkMzdlOTE0IiwNCiAgICAidXNyaWQiOiAiODczN2JlYmUtMDFhNC00NDkzLWE4ZGItNDMzNmViNTViNWIzIiwNCiAgICAiZmVkaWQiOiAiNjcyZGY0ZDEtZDljYi01Y2NiLTM4NzUtNmJjMzA5NTZlN2Q1IiwNCn0NCg0KaW5pdChKU09OLnN0cmluZ2lmeShqc29uSW5wdXQpKTs=" }, { "name": "(CTE) - Emissão copy.js", "isDirectory": false, "__KEY__": "eb09887a-34ba-bc55-a463-36b51347deb9", "size": 109741, "dateModified": "2022-08-11T16:27:35.000Z", "content": "" }, { "name": "(CTE) - Recalculo Motor de Calculo.js", "isDirectory": false, "__KEY__": "12c67a41-947d-3a28-1d67-ea0cad5d2139", "size": 101075, "dateModified": "2022-09-21T17:24:49.000Z", "content": "" }, { "name": "(CTE) - Recebimento.js", "isDirectory": false, "__KEY__": "1098b886-cbd5-0209-255d-8f4877909e9a", "size": 148636, "dateModified": "2022-07-15T16:29:11.000Z", "content": "" }, { "name": "(CTE) - Substituicao.js", "isDirectory": false, "__KEY__": "7e4f48d7-1786-457e-7da8-b3e5b76a7b53", "size": 13576, "dateModified": "2022-06-28T13:50:11.000Z", "content": "" }, { "name": "(CTE) - Tarefa Faturamento.js", "isDirectory": false, "__KEY__": "8a43af24-ddca-e09d-ac69-78235776e726", "size": 55527, "dateModified": "2022-08-26T20:59:12.000Z", "content": "" }, { "name": "(DOOTAX) - Consultar Guias.js", "isDirectory": false, "__KEY__": "ee2b3ee3-36dd-2b24-92c8-1ce69ca439b5", "size": 26911, "dateModified": "2022-08-26T19:43:45.000Z", "content": "" }, { "name": "(DOOTAX) - Garação de Contas a Pagar.js", "isDirectory": false, "__KEY__": "4d2faa76-29b6-477b-6e5e-31cdec0aa0ca", "size": 35330, "dateModified": "2022-05-27T17:46:10.000Z", "content": "" }, { "name": "(DOOTAX) - Tarefa de consulta.js", "isDirectory": false, "__KEY__": "53f7dcd7-a255-3c1d-2b79-d84c6ca3ecb4", "size": 26615, "dateModified": "2022-07-17T00:37:27.000Z", "content": "" }, { "name": "(MDFE) - Cancelamento.js", "isDirectory": false, "__KEY__": "9cee4ecb-f1c2-de0d-2896-fa9a95489256", "size": 21338, "dateModified": "2022-06-20T14:26:14.000Z", "content": "" }, { "name": "(MDFE) - Emissão.js", "isDirectory": false, "__KEY__": "c35755d2-e915-05cd-814b-2fd0a4245a3a", "size": 66579, "dateModified": "2022-09-04T00:07:06.000Z", "content": "" }, { "name": "(MDFE) - Encerramento.js", "isDirectory": false, "__KEY__": "5f64b2ee-c67e-9816-979e-13c346efc7a6", "size": 26240, "dateModified": "2022-06-17T15:43:17.000Z", "content": "" }, { "name": "(MDFE) - Frete Mínimo.js", "isDirectory": false, "__KEY__": "194a56a9-5f72-ecd4-3a45-496db833f15c", "size": 9165, "dateModified": "2022-06-11T22:32:45.000Z", "content": "" }, { "name": "(MDFE) - Geração.js", "isDirectory": false, "__KEY__": "1c61a111-1823-4002-1ba6-f9b48a746ef8", "size": 23451, "dateModified": "2022-06-14T20:07:36.000Z", "content": "" }, { "name": "(MDFE) - Incluir Condutor.js", "isDirectory": false, "__KEY__": "7bb97b06-9617-4984-2d09-80bdbb351a5b", "size": 16714, "dateModified": "2022-06-21T19:38:17.000Z", "content": "Y29uc3QgeyBKU0RPTSB9ID0gcmVxdWlyZSgianNkb20iKTsNCmNvbnN0IHsgd2luZG93IH0gPSBuZXcgSlNET00oIiIpOw0KY29uc3QgJCA9IHJlcXVpcmUoImpxdWVyeSIpKHdpbmRvdyk7DQpjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7DQoNCmNvbnN0IHsgZGF0ZSB9ID0gcmVxdWlyZSgnYXNzZXJ0LXBsdXMnKTsNCmNvbnN0IHsgdHlwZSB9ID0gcmVxdWlyZSgnb3MnKTsNCmNvbnN0IHsgZm9ybWF0RGF0ZSB9ID0gcmVxdWlyZSgndG91Z2gtY29va2llJyk7DQp2YXIgb25lcmd5ID0gcmVxdWlyZSgnQzovVXNlcnMvVGFsbGVzQW5kcmFkZS9Eb2N1bWVudHMvT25lcmd5IExvY2FsL29uZXJneS9vbmVyZ3ktY2xpZW50LmpzJyk7DQpjb25zdCBib2R5UGFyc2VyID0gcmVxdWlyZSgnYm9keS1wYXJzZXInKTsNCg0KcmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChjb250ZW50LCBuZWVkbGUsIHJlcGxhY2VtZW50KSB7DQogICAgcmV0dXJuIGNvbnRlbnQuc3BsaXQobmVlZGxlKS5qb2luKHJlcGxhY2VtZW50KTsNCn07DQoNCmFzeW5jIGZ1bmN0aW9uIFJlYWRFeGNlbFRvSnNvbihhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5SZWFkRXhjZWxUb0pzb24oYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIG9uZXJneV9nZXQoYXJncykgew0KICAgIHZhciByID0gYXdhaXQgb25lcmd5Lm9uZXJneV9nZXQoYXJncyk7DQogICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHIpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBoYXNoTWQ1KGFyZ3MpIHsNCiAgICByZXR1cm4gYXdhaXQgb25lcmd5Lmhhc2hNZDUoYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIG9uZXJneV9zYXZlKGFyZ3MpIHsNCiAgICByZXR1cm4gYXdhaXQgb25lcmd5Lm9uZXJneV9zYXZlKGFyZ3MpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBzZW5kSXRlbVRvT25lcmd5KHRlbXBsYXRlaWQsIHVzcmlkLCBhc3NpZCwgZGF0YSkgew0KICAgIGxldCBvbmVyZ3lTYXZlRGF0YSA9IHsNCiAgICAgICAgZmR0aWQ6IHRlbXBsYXRlaWQsDQogICAgICAgIGFzc2lkOiBhc3NpZCwNCiAgICAgICAgdXNyaWQ6IHVzcmlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKQ0KICAgIH0NCiAgICByZXR1cm4gYXdhaXQgb25lcmd5X3NhdmUob25lcmd5U2F2ZURhdGEpOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBvbmVyZ3lfdXBkYXRlbWFueShhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5vbmVyZ3lfc2F2ZShhcmdzKTsNCn0NCg0KYXN5bmMgZnVuY3Rpb24gc2VuZG1haWwoYXJncykgew0KICAgIHJldHVybiBhd2FpdCBvbmVyZ3kuc2VuZG1haWwoYXJncyk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIGluY3JlbWVudChhcmdzKSB7DQogICAgcmV0dXJuIGF3YWl0IG9uZXJneS5pbmNyZW1lbnQoYXJncyk7DQp9DQoNCmNsYXNzIE1lbW9yeSB7DQogICAgdmFsTWVtb3J5ID0gW107DQogICAgVHJ5QWRkKGtleSwgdmFsdWUsIHRpbWUpIHsNCiAgICAgICAgdmFyIGV4aXN0ID0gZmFsc2U7DQogICAgICAgIGZvciAobGV0IHMgaW4gdGhpcy52YWxNZW1vcnkpIHsNCiAgICAgICAgICAgIGlmICh0aGlzLnZhbE1lbW9yeVtzXS5rZXkgPT0ga2V5KSB7DQogICAgICAgICAgICAgICAgZXhpc3QgPSB0cnVlOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGlmIChleGlzdCkgew0KICAgICAgICAgICAgcmV0dXJuIGZhbHNlOw0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgdGhpcy52YWxNZW1vcnkucHVzaCh7ICdrZXknOiBrZXksICd2YWx1ZSc6IHZhbHVlLCAndGltZSc6IHRpbWUgfSkNCiAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIFJlbW92ZShrZXkpIHsNCg0KICAgIH0NCn0NCmxldCBtZW1vcnkgPSBuZXcgTWVtb3J5KCk7DQoNCmNsYXNzIFV0aWxzIHsNCiAgICBHZXRVc2VyRHROb3coZm9ybWF0KSB7DQogICAgICAgIGxldCBkYXRhQXR1YWwgPSBuZXcgRGF0ZSgpOw0KICAgICAgICBsZXQgYW5vID0gZGF0YUF0dWFsLmdldEZ1bGxZZWFyKCk7DQogICAgICAgIGxldCBtZXMgPSAoKGRhdGFBdHVhbC5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAwKSk7DQogICAgICAgIGxldCBkaWEgPSAoZGF0YUF0dWFsLmdldERhdGUoKS50b1N0cmluZygpLnBhZFN0YXJ0KDIsIDApKTsNCiAgICAgICAgcmV0dXJuIGAke2Fub30tJHttZXN9LSR7ZGlhfSAwMDowMDowMGANCiAgICB9DQp9DQpsZXQgdXRpbHMgPSBuZXcgVXRpbHMoKTsNCg0KLyoNCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICAgU0NSSVBUICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQoqLw0KdmFyIFRlbXBsYXRlSWRNREZlID0gIjEwNzExMTg4LTFlMDItNDE1Yy05MjdmLTRhZGQ3YTFjZDllMCI7DQp2YXIgdGVtcGxhdGVMaXN0YUVzdGFiZWxlY2ltZW50b3MgPSAnMjM4YWJkOGQtY2UxYi00ZGNlLTgwY2YtYmM3ZGVlOTJmOGNmJzsNCmxldCB0ZW1wbGF0ZUVuZGVyZWNvRW1pdGVudGUgPSAnOGRlODg2OTItMDgwZi00NGZlLTlmMGMtMjljOGVhNTM3ZjRmJzsNCnZhciBNREZFTmFvRW1pdGlkb0lEID0gIjgzNmViNjZiLTgzZjItNDY4OC05NGNmLTI1NjU0MTVjYmE2YyINCg0KYXN5bmMgZnVuY3Rpb24gaW5pdChqc29uKSB7DQogICAgdmFyIGRhdGEgPSBKU09OLnBhcnNlKGpzb24pOw0KDQogICAgbGV0IGZpbHRyb01ERkUgPSBnZXJhckZpbHRybygiX2lkIiwgZGF0YS5JRF9PTkVfUkVGKTsNCiAgICBsZXQgb2JqbWRmZSA9IGF3YWl0IGdldE9uZXJneUl0ZW0oVGVtcGxhdGVJZE1ERmUsIGRhdGEub25lcmd5X2pzX2N0eC5hc3NpZCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBmaWx0cm9NREZFKTsNCiAgICBpZiAob2JqbWRmZS5sZW5ndGggPT0gMCkgew0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6ICJOw6NvIGZvaSBwb3Nzw612ZWwgaW5jbHVpciBjb25kdXRvci4gTURGRSBzZWxlY2lvbmFkYSBuw6NvIGZvaSBlbmNvbnRyYWRhLiINCiAgICAgICAgICAgIH0NCiAgICAgICAgfTsNCiAgICAgICAgYXdhaXQgU2V0UmV0dXJuKGRhdGEsIHJlc3VsdCk7DQogICAgICAgIHJldHVybiB0cnVlOw0KICAgIH0NCg0KICAgIHZhciByZWdpc3Ryb01ERmUgPSBvYmptZGZlWzBdLlVybEpzb25Db250ZXh0Ow0KICAgIGxldCBmdW5jdGlvblJlc3VsdCA9IGF3YWl0IENyaWFPYmpldG9JbmNsdXNhb0NvbmR1dG9yKGRhdGEsIHJlZ2lzdHJvTURGZSk7DQogICAgaWYgKGZ1bmN0aW9uUmVzdWx0LnN0YXR1cyA9PSAiTk9LIikgew0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6IGZ1bmN0aW9uUmVzdWx0Lm1zZw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBhd2FpdCBTZXRSZXR1cm4oZGF0YSwgcmVzdWx0KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KICAgIE9iakluY2x1aXJDb25kdXRvciA9IGZ1bmN0aW9uUmVzdWx0Lm9iajsNCg0KICAgIGxldCB0b2tlbk9iaiA9IGF3YWl0IFBlZ2FUb2tlbihkYXRhKTsNCiAgICBpZiAoIXRva2VuT2JqKSB7DQogICAgICAgIGxldCByZXN1bHQgPSB7DQogICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgImxvZ19tZGZlIjogIihJbmNsdXPDo28gZGUgQ29uZHV0b3IpIFRva2VuIEludsOhbGlkbyBvdSBFbXByZXNhIG7Do28gQXV0b3JpemFkYSAhIg0KICAgICAgICAgICAgfQ0KICAgICAgICB9Ow0KICAgICAgICBhd2FpdCBTZXRSZXR1cm4oZGF0YSwgcmVzdWx0KTsNCiAgICAgICAgcmV0dXJuIHRydWU7DQogICAgfQ0KDQogICAgbGV0IHVybGVtaXNzYW8gPSAiaHR0cHM6Ly9hcGlrZWVwdHJ1ZWRmZS5henVyZXdlYnNpdGVzLm5ldC9hcGkvUHJvY01ERmUvSW5jbHVpckNvbmR1dG9yTURGZSI7DQogICAgbGV0IHJlc3Bvc3RhTWVuc2FnZXJpYSA9IGF3YWl0IEVmZXR1YU1lbnNhZ2VyaWEoZGF0YSwgT2JqSW5jbHVpckNvbmR1dG9yLCB0b2tlbk9iaiwgdXJsZW1pc3Nhbyk7DQoNCiAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLmhhc093blByb3BlcnR5KCJzdGF0dXMiKSAmJiByZXNwb3N0YU1lbnNhZ2VyaWEuc3RhdHVzID09IDQwMCkgew0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6IGBFcnJvIG5hIGV4ZWN1w6fDo286JHtKU09OLnN0cmluZ2lmeShyZXNwb3N0YU1lbnNhZ2VyaWEuZXJyb3JzKX1gDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGF3YWl0IFNldFJldHVybihkYXRhLCByZXN1bHQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAoIXJlc3Bvc3RhTWVuc2FnZXJpYSkgew0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6IGBTZW0gUmVzcG9zdGEgZGEgTWVuc2FnZXJpYS5gDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGF3YWl0IFNldFJldHVybihkYXRhLCByZXN1bHQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLmhhc093blByb3BlcnR5KCJleGNlcHRpb25zIikgJiYgcmVzcG9zdGFNZW5zYWdlcmlhLmV4Y2VwdGlvbnMgIT0gbnVsbCAmJiByZXNwb3N0YU1lbnNhZ2VyaWEuZXhjZXB0aW9ucy5sZW5ndGggPiAwKSB7DQogICAgICAgIHZhciBubG9nID0gIiI7DQogICAgICAgIGZvciAodmFyIGNhIGluIHJlc3Bvc3RhTWVuc2FnZXJpYS5leGNlcHRpb25zKSB7DQogICAgICAgICAgICB2YXIgcmVzcGNhID0gcmVzcG9zdGFNZW5zYWdlcmlhLmV4Y2VwdGlvbnNbY2FdOw0KICAgICAgICAgICAgaWYgKG5sb2cgPT09ICIiKSB7DQogICAgICAgICAgICAgICAgbmxvZyA9IHJlc3BjYS5kZXNjcmljYW87DQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIG5sb2cgPSBubG9nICsgIiAvICIgKyByZXNwY2EuZGVzY3JpY2FvOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGxldCByZXN1bHQgPSB7DQogICAgICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAgICAgImxvZ19tZGZlIjogYChJbmNsdXPDo28gZGUgbW90b3Jpc3RhKSAtICR7bmxvZ31gDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGF3YWl0IFNldFJldHVybihkYXRhLCByZXN1bHQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCg0KICAgIGlmIChyZXNwb3N0YU1lbnNhZ2VyaWEuaWQgPT0gIjEzNSIpIHsNCiAgICAgICAgYXdhaXQgR3JhdmFFdmVudG8ocmVnaXN0cm9NREZlLmZlZGlkLCAiSW5jbHVzw6NvIGRlIE1vdG9yaXN0YSIsIHJlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLnByb3RvY29sb0F1dG9yaXphY2FvLCAiIiwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQpOw0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6IGAoSW5jbHVzw6NvIGRlIG1vdG9yaXN0YSkgLSAke3Jlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLnJldG9ybm9TRUZBWn1gDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGF3YWl0IFNldFJldHVybihkYXRhLCByZXN1bHQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBpZiAocmVzcG9zdGFNZW5zYWdlcmlhLmhhc093blByb3BlcnR5KCJvYmpzIikgJiYNCiAgICAgICAgcmVzcG9zdGFNZW5zYWdlcmlhLm9ianMgJiYNCiAgICAgICAgcmVzcG9zdGFNZW5zYWdlcmlhLm9ianMuaGFzT3duUHJvcGVydHkoInJldG9ybm9TRUZBWiIpICYmDQogICAgICAgIHJlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLnJldG9ybm9TRUZBWikgew0KICAgICAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAgICAgIlVybEpzb25Db250ZXh0Ijogew0KICAgICAgICAgICAgICAgICJsb2dfbWRmZSI6IGAoSW5jbHVzw6NvIGRlIG1vdG9yaXN0YSkgLSAke3Jlc3Bvc3RhTWVuc2FnZXJpYS5vYmpzLnJldG9ybm9TRUZBWn1gDQogICAgICAgICAgICB9DQogICAgICAgIH07DQogICAgICAgIGF3YWl0IFNldFJldHVybihkYXRhLCByZXN1bHQpOw0KICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICB9DQoNCiAgICBsZXQgcmVzdWx0ID0gew0KICAgICAgICAiVXJsSnNvbkNvbnRleHQiOiB7DQogICAgICAgICAgICAibG9nX21kZmUiOiBgKEluY2x1c8OjbyBkZSBtb3RvcmlzdGEpIC0gTsOjbyBmb2kgcG9zc8OtdmVsIGFkaWNpb25hciBjb25kdXRvciBlIG7Do28gZm9pIGlkZW50aWZpY2FkbyBlcnJvLmANCiAgICAgICAgfQ0KICAgIH07DQogICAgYXdhaXQgU2V0UmV0dXJuKGRhdGEsIHJlc3VsdCk7DQogICAgcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIGluaXRCZWZvcmUoanNvbikgew0KICAgIC8vcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIGluaXREZWxldGUoanNvbikgew0KICAgIC8vcmV0dXJuIHRydWU7DQp9DQoNCmZ1bmN0aW9uIHJldG9ybmFfc29tZW50ZW51bWVyb3Moc3RycmVjKSB7DQogICAgaWYgKHN0cnJlYykgew0KICAgICAgICBsZXQgc3RycmV0ID0gc3RycmVjLnJlcGxhY2UoL1teXGRdKy9nLCAnJywgJycpOw0KICAgICAgICByZXR1cm4gc3RycmV0Ow0KICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiAiIjsNCiAgICB9DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIENyaWFPYmpldG9JbmNsdXNhb0NvbmR1dG9yKGRhdGEsIE9iak1ERmUpIHsNCg0KICAgIGxldCBGaWx0cm9MaXN0YUVzdGFiZWxlY2ltZW50byA9IGdlcmFyRmlsdHJvKCJfaWQiLCBPYmpNREZlLkxFU1RBU0Z1bmlkYWRlX2RlX2VtaXNzYW9fbWRmZV9pZCk7DQogICAgbGV0IG9iakVtaXRlbnRlID0gYXdhaXQgZ2V0T25lcmd5SXRlbSh0ZW1wbGF0ZUxpc3RhRXN0YWJlbGVjaW1lbnRvcywgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIEZpbHRyb0xpc3RhRXN0YWJlbGVjaW1lbnRvKTsNCiAgICBpZiAob2JqRW1pdGVudGUubGVuZ3RoID09IDApIHsNCiAgICAgICAgcmV0dXJuIHsNCiAgICAgICAgICAgICJzdGF0dXMiOiAiTk9LIiwNCiAgICAgICAgICAgICJtc2ciOiAiTsOjbyBmb2kgcG9zc8OtdmVsIGVuY29udHJhciB1bmlkYWRlIGRlIGVtaXNzw6NvLiIsDQogICAgICAgICAgICAib2JqIjogbnVsbA0KICAgICAgICB9DQogICAgfQ0KICAgIGxldCBjdHhFbWl0ZW50ZSA9IG9iakVtaXRlbnRlWzBdLlVybEpzb25Db250ZXh0Ow0KDQoNCiAgICAvLyBFbmRlcmXDp28gZG8gRW1pdGVudGUNCg0KICAgIGxldCBGaWx0cm9FbmRlcmVjb0VtaXRlbnRlID0gZ2VyYXJGaWx0cm8oIklEX09ORV9SRUYiLCBvYmpFbWl0ZW50ZVswXS5JRCk7DQogICAgbGV0IG9iakVuZGVyZWNvRW1pdGVudGUgPSBhd2FpdCBnZXRPbmVyZ3lJdGVtKHRlbXBsYXRlRW5kZXJlY29FbWl0ZW50ZSwgZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLCBkYXRhLm9uZXJneV9qc19jdHgudXNyaWQsIEZpbHRyb0VuZGVyZWNvRW1pdGVudGUpOw0KICAgIGlmIChvYmpFbmRlcmVjb0VtaXRlbnRlLmxlbmd0aCA9PSAwKSB7DQogICAgICAgIHJldHVybiB7DQogICAgICAgICAgICAic3RhdHVzIjogIk5PSyIsDQogICAgICAgICAgICAibXNnIjogIk7Do28gZm9pIHBvc3PDrXZlbCBlbmNvbnRyYXIgZW5kZXJlw6dvIGRhIHVuaWRhZGUgZGUgZW1pc3PDo28iLA0KICAgICAgICAgICAgIm9iaiI6IG51bGwNCiAgICAgICAgfQ0KICAgIH0NCiAgICBsZXQgY3R4RW5kZXJlY29FbWl0ZW50ZSA9IG9iakVuZGVyZWNvRW1pdGVudGVbMF0uVXJsSnNvbkNvbnRleHQ7DQoNCiAgICBsZXQgT2JqSW5jQ29uZHV0b3IgPSB7DQogICAgICAgICJsaW5rQ2VydGlmaWNhZG8iOiBjdHhFbWl0ZW50ZS5jZXJ0aWZpY2Fkb1swXS5VcmwsDQogICAgICAgICJzZW5oYUNlcnQiOiBjdHhFbWl0ZW50ZS5zZW5oYV9jZXJ0aWZpY2FkbywNCiAgICAgICAgInRpcG9BbWJpZW50ZSI6IHJldGlyYV9hY2VudG9zKGN0eEVtaXRlbnRlLmFtYmllbnRlX2Rlc2MpLA0KICAgICAgICAidWZFbWl0ZW50ZUNUZSI6IGN0eEVuZGVyZWNvRW1pdGVudGUuTUxPQ1plc3RhZG9fdWZfX3VmX2VtcHJlc2EsDQogICAgICAgICJjbnBqRW1pdGVudGVDVGUiOiBjdHhFbWl0ZW50ZS5jbnBqLA0KICAgICAgICAiY29kTXVuaWNpcGlvRW1pdGVudGVDVGUiOiBjdHhFbmRlcmVjb0VtaXRlbnRlLk1MT0NabXVuaWNpcGlvX2liZ2UsDQogICAgICAgICJjaGF2ZU1ERmUiOiBPYmpNREZlLmNoYXZlX21kZmUuc3Vic3RyaW5nKDQsIDQ4KSwNCiAgICAgICAgIm51bWVyb1Byb3RvY29sbyI6IE9iak1ERmUubnVtZXJvX3Byb3RvY29sb19tZGZlLA0KICAgICAgICAianVzdGlmaWNhdGl2YSI6IGRhdGEubW90aXZvX2RhX2luY2x1c2FvX2RvX2NvbmR1dG9yX21kZmUsDQogICAgICAgIC8vInByb3RvY29sb0F1dG9yaXphY2FvIjogInN0cmluZyIsDQogICAgICAgICJkdG9Db25kdXRvcmVzVmVpY3Vsb3MiOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgIm5vbWVDb25kdXRvciI6IGRhdGEuUEVTbm9tZV9wZXNzb2FfX25vbWVfZG9fY29uZHV0b3JfbWRmZSwNCiAgICAgICAgICAgICAgICAiY3BmQ29uZHV0b3IiOiByZXRvcm5hX3NvbWVudGVudW1lcm9zKGRhdGEuUEVTY3BmX3Blc3NvYV9fY3BmX21vdG9yaXN0YSkNCiAgICAgICAgICAgIH0NCiAgICAgICAgXQ0KICAgIH07DQoNCiAgICByZXR1cm4gew0KICAgICAgICAic3RhdHVzIjogIk9LIiwNCiAgICAgICAgIm1zZyI6ICIiLA0KICAgICAgICAib2JqIjogT2JqSW5jQ29uZHV0b3INCiAgICB9DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIFBlZ2FUb2tlbihvYmopIHsNCg0KICAgIGxldCB1c3JMb2dpbiA9ICJwcjNzdDN4IjsNCiAgICBsZXQgcHdkID0gInByM3N0M3hjdDMyMDIxIjsNCiAgICBsZXQgc3RyUmVzcFRva2VuID0gIiI7DQogICAgYXdhaXQgYXhpb3Moew0KICAgICAgICB1cmw6ICJodHRwczovL2FwaWtlZXB0cnVlZGZlLmF6dXJld2Vic2l0ZXMubmV0L2FwaS9Mb2dpbj9wVXNlck5hbWU9IiArIHVzckxvZ2luICsgIiZwUGFzcz0iICsgcHdkLA0KICAgICAgICAvL3VybDogImh0dHBzOi8vbG9jYWxob3N0OjQ0MzUyL2FwaS9Mb2dpbj9wVXNlck5hbWU9cHIzc3QzeCZwUGFzcz1wcjNzdDN4Y3QzMjAyMSIsDQogICAgICAgIG1ldGhvZDogJ0dFVCcsDQogICAgICAgIGRhdGE6ICIiLA0KICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLA0KICAgIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7DQogICAgICAgIHN0clJlc3BUb2tlbiA9IHJlc3BvbnNlLmRhdGE7DQogICAgfSwgKGVycm9yKSA9PiB7DQogICAgICAgIHN0clJlc3BUb2tlbiA9ICcnDQogICAgfSk7DQogICAgcmV0dXJuIHN0clJlc3BUb2tlbjsNCg0KICAgIC8qDQogICAgICAgIGxldCB1c3JMb2dpbiA9IG9uZXJneS5HZXRTdWJzY3JpcHRpb25Db25maWcoInVzdWFyaW9fZGZlIik7DQogICAgICAgIGxldCBwd2QgPSBvbmVyZ3kuR2V0U3Vic2NyaXB0aW9uQ29uZmlnKCJzZW5oYV9kZmUiKTsNCiAgICAgICAgbGV0IHN0clJlc3BUb2tlbiA9ICIiOw0KICAgICAgICBBamF4KHsNCiAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpa2VlcHRydWVkZmUuYXp1cmV3ZWJzaXRlcy5uZXQvYXBpL0xvZ2luP3BVc2VyTmFtZT0iICsgdXNyTG9naW4gKyAiJnBQYXNzPSIgKyBwd2QsDQogICAgICAgICAgICBhc3NpZDogb2JqLmFzc2lkLA0KICAgICAgICAgICAgdXNyaWQ6IG9iai51c3JpZCwNCiAgICAgICAgICAgIGZlZGlkOiBvYmouZmVkaWQsDQogICAgICAgICAgICBtZXRob2Q6ICdHRVQnLA0KICAgICAgICAgICAgZGF0YTogIiIsDQogICAgICAgICAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLA0KICAgICAgICAgICAgYXN5bmM6IGZhbHNlLA0KICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHsNCiAgICAgICAgICAgICAgICBzdHJSZXNwVG9rZW4gPSBkYXRhOw0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbihqcVhIUiwgZXhjZXB0aW9uKSB7DQogICAgICAgICAgICAgICAgc3RyUmVzcFRva2VuID0gZXhjZXB0aW9uOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9KTsNCiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyUmVzcFRva2VuKTsNCiAgICAqLw0KfQ0KDQpmdW5jdGlvbiByZXRpcmFfYWNlbnRvcyhzdHIpIHsNCiAgICBsZXQgY29tX2FjZW50byA9ICLDgMOBw4LDg8OEw4XDhsOHw4jDicOKw4vDjMONw47Dj8OQw5HDksOTw5TDlcOWw5jDmcOaw5vDnMOdxZTDnsOfw6DDocOiw6PDpMOlw6bDp8Oow6nDqsOrw6zDrcOuw6/DsMOxw7LDs8O0w7XDtsO4w7nDusO7w7zDvcO+w7/FlSI7DQogICAgbGV0IHNlbV9hY2VudG8gPSAiQUFBQUFBQUNFRUVFSUlJSUROT09PT09PVVVVVVlSc0JhYWFhYWFhY2VlZWVpaWlpb25vb29vb291dXV1eWJ5ciI7DQogICAgbGV0IG5vdmFzdHIgPSAiIjsNCiAgICBpZiAoc3RyKSB7DQogICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHsNCiAgICAgICAgICAgIHRyb2NhID0gZmFsc2U7DQogICAgICAgICAgICBmb3IgKGEgPSAwOyBhIDwgY29tX2FjZW50by5sZW5ndGg7IGErKykgew0KICAgICAgICAgICAgICAgIGlmIChzdHIuc3Vic3RyKGksIDEpID09IGNvbV9hY2VudG8uc3Vic3RyKGEsIDEpKSB7DQogICAgICAgICAgICAgICAgICAgIG5vdmFzdHIgKz0gc2VtX2FjZW50by5zdWJzdHIoYSwgMSk7DQogICAgICAgICAgICAgICAgICAgIHRyb2NhID0gdHJ1ZTsNCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgaWYgKHRyb2NhID09PSBmYWxzZSkgew0KICAgICAgICAgICAgICAgIG5vdmFzdHIgKz0gc3RyLnN1YnN0cihpLCAxKTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCiAgICByZXR1cm4gbm92YXN0cjsNCn0NCg0KYXN5bmMgZnVuY3Rpb24gRWZldHVhTWVuc2FnZXJpYShvYmosIG9iamVudmlvLCB0b2tlbk9iaiwgZ251cmwpIHsNCg0KICAgIGxldCByZXRvcm5vOw0KICAgIGF3YWl0IGF4aW9zKHsNCiAgICAgICAgdXJsOiBnbnVybCwNCiAgICAgICAgbWV0aG9kOiAnUE9TVCcsDQogICAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbicsDQogICAgICAgIGhlYWRlcnM6IHsNCiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogJ2JlYXJlciAnICsgdG9rZW5PYmoudG9rZW4NCiAgICAgICAgfSwNCiAgICAgICAgZGF0YTogb2JqZW52aW8sDQogICAgfSkudGhlbigocmVzcG9uc2UpID0+IHsNCiAgICAgICAgcmV0b3JubyA9IHJlc3BvbnNlLmRhdGE7DQogICAgfSwgKGVycm9yKSA9PiB7DQogICAgICAgIHJldG9ybm8gPSBlcnJvci5yZXNwb25zZS5kYXRhDQogICAgfSk7DQogICAgcmV0dXJuIHJldG9ybm8NCg0KICAgIC8qDQogICAgICAgIGxldCBzdHJSZXNwQ1RlID0gIiI7DQogICAgICAgIGFqYXgoew0KICAgICAgICAgICAgdXJsOiBnbnVybCwNCiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLA0KICAgICAgICAgICAgYXN5bmM6IGZhbHNlLA0KICAgICAgICAgICAgY29udGVudFR5cGU6ICJhcHBsaWNhdGlvbi9qc29uIiwNCiAgICAgICAgICAgIGFzc2lkOiBvYmouYXNzaWQsDQogICAgICAgICAgICB1c3JpZDogb2JqLnVzcmlkLA0KICAgICAgICAgICAgZmVkaWQ6IG9iai5mZWRpZCwNCiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KG9iamVudmlvKSwNCiAgICAgICAgICAgIGF1dGhvcml6YXRpb246IEpTT04uc3RyaW5naWZ5KHsNCiAgICAgICAgICAgICAgICB0eXBlOiAiYmVhcmVyIiwNCiAgICAgICAgICAgICAgICB2YWx1ZTogdG9rZW5PYmoudG9rZW4NCiAgICAgICAgICAgIH0pLA0KICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywganFYSFIpIHsNCiAgICAgICAgICAgICAgICBzdHJSZXNwQ1RlID0gZGF0YTsNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oanFYSFIsIGV4Y2VwdGlvbikgew0KICAgICAgICAgICAgICAgIHN0clJlc3BDVGUgPSBleGNlcHRpb247DQogICAgICAgICAgICB9DQogICAgICAgIH0pOw0KICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShzdHJSZXNwQ1RlKTsNCiAgICAgICAgKi8NCn0NCg0KYXN5bmMgZnVuY3Rpb24gZ2V0T25lcmd5SXRlbShmZHRpZCwgYXNzaWQsIHVzcmlkLCBmaWx0cm8pIHsNCiAgICBsZXQgc3RyUmVzcCA9IGF3YWl0IG9uZXJneV9nZXQoew0KICAgICAgICBmZHRpZDogZmR0aWQsDQogICAgICAgIGFzc2lkOiBhc3NpZCwNCiAgICAgICAgdXNyaWQ6IHVzcmlkLA0KICAgICAgICBmaWx0ZXI6IGZpbHRybw0KICAgIH0pOw0KICAgIHJldHVybiBKU09OLnBhcnNlKHN0clJlc3ApOw0KfQ0KDQphc3luYyBmdW5jdGlvbiBHcmF2YUV2ZW50byhwSURfT05FX1JFRiwgdGlwb2V2ZW50bywgcHByb3RvY29sbywgcGNoYXZlLCBwYXNzaWQsIHB1c3JpZCkgew0KICAgIGxldCBmZHRfZXZlbnRvID0gImYyNjI2YzI5LTM5MjMtNDZhNy04YzM5LThjYzQxMGNlYjI5NyI7DQogICAgbGV0IG9iamV2ZW50byA9IHsNCiAgICAgICAgSURfT05FX1JFRjogcElEX09ORV9SRUYsDQogICAgICAgIGRhdGFob3JhX2RvX2V2ZW50b0RhdGU6IHV0aWxzLkdldFVzZXJEdE5vdygieXl5eS1NTS1kZCBISDptbTpzcyIpLA0KICAgICAgICBkYXRhaG9yYV9kb19ldmVudG86IHV0aWxzLkdldFVzZXJEdE5vdygieXl5eS1NTS1kZCBISDptbTpzcyIpLA0KICAgICAgICB0aXBvX2RvX2V2ZW50b19tZGZlOiB0aXBvZXZlbnRvLA0KICAgICAgICBwcm90b2NvbG9fbWRmZTogcHByb3RvY29sbywNCiAgICAgICAgY2hhdmVfbWRmZTogcGNoYXZlDQogICAgfTsNCiAgICBhd2FpdCBzZW5kSXRlbVRvT25lcmd5KGZkdF9ldmVudG8sIHBhc3NpZCwgcHVzcmlkLCBvYmpldmVudG8pOw0KICAgIHJldHVybjsNCn0NCg0KYXN5bmMgZnVuY3Rpb24gc2VuZEl0ZW1Ub09uZXJneSh0ZW1wbGF0ZWlkLCBhc3NpZCwgdXNyaWQsIGRhdGEsIGZlZGlkLCB1a0ZpZWxkKSB7DQogICAgbGV0IG9uZXJneVNhdmVEYXRhID0gew0KICAgICAgICBmZHRpZDogdGVtcGxhdGVpZCwNCiAgICAgICAgYXNzaWQ6IGFzc2lkLA0KICAgICAgICB1c3JpZDogdXNyaWQsDQogICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGRhdGEpDQogICAgfTsNCg0KICAgIGlmIChmZWRpZCAhPT0gdW5kZWZpbmVkICYmIGZlZGlkICE9PSAnJykgew0KICAgICAgICBvbmVyZ3lTYXZlRGF0YS5pZCA9IGZlZGlkOw0KICAgIH0NCiAgICBpZiAodWtGaWVsZCAhPT0gdW5kZWZpbmVkICYmIHVrRmllbGQgIT09ICcnKSB7DQogICAgICAgIG9uZXJneVNhdmVEYXRhLnVrRmllbGQgPSB1a0ZpZWxkOw0KICAgIH0NCiAgICByZXR1cm4gYXdhaXQgb25lcmd5X3NhdmUob25lcmd5U2F2ZURhdGEpOw0KfQ0KDQpmdW5jdGlvbiBTZXRPYmplY3RSZXNwb25zZShjb25kLCBqc29uLCBXYWl0aW5nV2ViSG9vaykgew0KICAgIGlmIChXYWl0aW5nV2ViSG9vayA9PT0gdW5kZWZpbmVkKQ0KICAgICAgICBXYWl0aW5nV2ViSG9vayA9IGZhbHNlOw0KDQogICAgdmFyIG9iaiA9IHsNCiAgICAgICAgJ2NvbmQnOiBjb25kLA0KICAgICAgICAnanNvbic6IEpTT04uc3RyaW5naWZ5KGpzb24pLA0KICAgICAgICAnV2FpdGluZ1dlYkhvb2snOiBXYWl0aW5nV2ViSG9vaywNCiAgICB9Ow0KICAgIHJldHVybiBvYmo7DQp9DQoNCmZ1bmN0aW9uIGdlcmFyRmlsdHJvKGZpZWxOYW1lUCwgdmFsdWVQKSB7DQogICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KFt7IEZpZWxOYW1lOiBmaWVsTmFtZVAsIFR5cGU6IGAke3R5cGVvZiB2YWx1ZVAgPT0gIm51bWJlciIgPyAiTnVtZXJpYyIgOiAic3RyaW5nIn1gLCBGaXhlZFR5cGU6IGAke3R5cGVvZiB2YWx1ZVAgPT0gIm51bWJlciIgPyAiTnVtZXJpYyIgOiAic3RyaW5nIn1gLCBWYWx1ZTE6IHZhbHVlUCB9XSk7DQp9DQoNCmFzeW5jIGZ1bmN0aW9uIFNldFJldHVybihkYXRhLCByZXN1bHQpIHsNCiAgICBhd2FpdCBvbmVyZ3lfdXBkYXRlbWFueSh7DQogICAgICAgIGZkdGlkOiBNREZFTmFvRW1pdGlkb0lELA0KICAgICAgICBhc3NpZDogZGF0YS5vbmVyZ3lfanNfY3R4LmFzc2lkLA0KICAgICAgICB1c3JpZDogZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShyZXN1bHQpLA0KICAgICAgICBpZDogZGF0YS5JRF9PTkVfUkVGDQogICAgfSk7DQp9DQoNCg0KDQovLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NCi8vVE9ETyBEQVRBDQp2YXIganNvbklucHV0ID0gew0KICAgICJQRVNub21lX3Blc3NvYV9fbm9tZV9kb19jb25kdXRvcl9tZGZlIjogIkJydW5vIENyZXBhbGRpIiwNCiAgICAiUEVTbm9tZV9kb19jb25kdXRvcl9tZGZlX2lkIjogImM2Yzc4Mjg0LWIyZjEtMTU3Ny02Mzc2LTkyNjM0MjNiYWIxMSIsDQogICAgIlBFU21vdG9yaXN0YV9jYWRhc3RyYWRvX2VmcmV0ZSI6ICJzaW0iLA0KICAgICJQRVNjcGZfcGVzc29hX19jcGZfbW90b3Jpc3RhIjogIjM1OS4xNTUuMzA4LTUwIiwNCiAgICAiUEVTY25oX3Blc3NvYV9fY25oX21vdG9yaXN0YSI6IDcwOTk2ODM0NzIwLA0KICAgICJQRVNjZWx1bGFyXzFfcGVzc29hX19jZWx1bGFyX21vdG9yaXN0YSI6ICIoMTEpIDk1ODg4LTg1NDkiLA0KICAgICJtb3Rpdm9fZGFfaW5jbHVzYW9fZG9fY29uZHV0b3JfbWRmZSI6ICJzYWRhc2RkIiwNCiAgICAiUEVTbW90b3Jpc3RhX2NhZGFzdHJhZG9fZWZyZXRlX2Rlc2MiOiAiU2ltIiwNCiAgICAiSURfT05FX1JFRiI6ICI4ZGE1NGMyYy0xZDM1LTQ3ZDUtODdjMy0xNTZjZTM5MWQzZmYiLA0KICAgICJvbmVUZW1wbGF0ZVRpdGxlIjogIiIsDQogICAgImFzc19pZCI6ICIwYWFjMDE0OC0wZTdkLTRhYmMtYTA3Ny02YTMwYTllMGYzZTUiLA0KICAgICJhc3NpZCI6ICIwYWFjMDE0OC0wZTdkLTRhYmMtYTA3Ny02YTMwYTllMGYzZTUiLA0KICAgICJmZWRpZCI6ICI4Y2QzYTI5NS0yZjcyLWU0ODgtNDYxZC0wYmM5NzM0ZTFlZjkiLA0KICAgICJmZHRpZCI6ICJlZDNmN2Q3NS1jM2QwLTRmNTgtOTYwNC02MzlmZGZmMDFmOTUiLA0KICAgICJ1c3JpZCI6ICI4NzM3YmViZS0wMWE0LTQ0OTMtYThkYi00MzM2ZWI1NWI1YjMiLA0KICAgICJlbWFpbCI6ICJkZXNlbnZAcHJlc3RleC5jb20uYnIiLA0KICAgICJvbmVyZ3lfcm9saWQiOiAiIiwNCiAgICAidGltZXpvbmUiOiBudWxsLA0KICAgICJvbmVyZ3lfanNfY3R4Ijogew0KICAgICAgICAiYXNzaWQiOiAiMGFhYzAxNDgtMGU3ZC00YWJjLWEwNzctNmEzMGE5ZTBmM2U1IiwNCiAgICAgICAgImZlZGlkIjogIjhjZDNhMjk1LTJmNzItZTQ4OC00NjFkLTBiYzk3MzRlMWVmOSIsDQogICAgICAgICJmZHRpZCI6ICJlZDNmN2Q3NS1jM2QwLTRmNTgtOTYwNC02MzlmZGZmMDFmOTUiLA0KICAgICAgICAidXNyaWQiOiAiODczN2JlYmUtMDFhNC00NDkzLWE4ZGItNDMzNmViNTViNWIzIiwNCiAgICAgICAgImluc2VydER0IjogIjIwMjItMDYtMjFUMTg6NTU6MjkuMTIyWiIsDQogICAgICAgICJ1cGRhdGVEdCI6ICIyMDIyLTA2LTIxVDE4OjU1OjI5LjEyMloiLA0KICAgICAgICAiY3VyX3VzZXJpZCI6ICI4NzM3YmViZS0wMWE0LTQ0OTMtYThkYi00MzM2ZWI1NWI1YjMiLA0KICAgICAgICAiZW1haWwiOiAiZGVzZW52QHByZXN0ZXguY29tLmJyIiwNCiAgICAgICAgInVzZXJfbmFtZSI6ICJkZXNlbnZAcHJlc3RleC5jb20uYnIiLA0KICAgICAgICAib25lcmd5X3JvbGlkIjogIiIsDQogICAgICAgICJwcmFpZCI6ICIwNTU4MTliMC01YmFkLTRjNDUtOTRjNS1hNzhjMTdhM2RiODIiLA0KICAgICAgICAicGN2aWQiOiAiMGIyMGIxYmMtYWJlMC00YTY5LWJiNjYtOWJlNjI1MDg2YmRjIiwNCiAgICAgICAgInByY2lkIjogImVhMjZlMmY4LWNhMGYtOTI2NS0xOWE0LTUzZGVmZjliYTJhZCIsDQogICAgICAgICJ0aW1lem9uZSI6IG51bGwsDQogICAgICAgICJ0aW1lem9uZV92YWx1ZSI6ICItMDM6MDAiLA0KICAgICAgICAicHViTnViSG9vayI6IG51bGwNCiAgICB9DQp9DQoNCg0KLy8ganNvbklucHV0Lm9uZXJneV9qc19jdHggPSB7DQovLyAgICAgImFzc19pZCI6ICIwYWFjMDE0OC0wZTdkLTRhYmMtYTA3Ny02YTMwYTllMGYzZTUiLA0KLy8gICAgICJhc3NpZCI6ICIwYWFjMDE0OC0wZTdkLTRhYmMtYTA3Ny02YTMwYTllMGYzZTUiLA0KLy8gICAgICJlbWFpbCI6ICJkZXNlbnZAcHJlc3RleC5jb20uYnIiLA0KLy8gICAgICJmZHRpZCI6ICI4MzZlYjY2Yi04M2YyLTQ2ODgtOTRjZi0yNTY1NDE1Y2JhNmMiLA0KLy8gICAgICJ1c3JpZCI6ICI4NzM3YmViZS0wMWE0LTQ0OTMtYThkYi00MzM2ZWI1NWI1YjMiLA0KLy8gICAgICJmZWRpZCI6ICI1NjU3YmI1Yi01OTg4LTQ0ZGMtYmQyOS1jZmExZDM5ZDY4ZjciLA0KLy8gfQ0KDQppbml0KEpTT04uc3RyaW5naWZ5KGpzb25JbnB1dCkpOw==" }, { "name": "(PESSOA) Integração SF.js", "isDirectory": false, "__KEY__": "909d6fc9-94aa-3672-5a78-a6304cacc35e", "size": 17899, "dateModified": "2022-12-21T20:25:07.000Z", "content": "" }, { "name": "BuscarToken.js", "isDirectory": false, "__KEY__": "c5803231-1562-0dab-85c6-e48e755b9052", "size": 0, "dateModified": "2022-12-12T12:29:13.000Z", "content": "" }, { "name": "fds.js", "isDirectory": false, "__KEY__": "34513581-4355-794e-c7a7-c83808f24e4d", "size": 3349, "dateModified": "2023-03-29T14:15:47.000Z", "content": "ZnVuY3Rpb24gaW5pdChqc29uKSB7DQogICAgbGV0IGRhdGEgPSBKU09OLnBhcnNlKGpzb24pOw0KICAgIGxldCByZXN1bHQgPSB7DQogICAgICAgICJkYXRhX2RlX3JldG9ybm9fbXVsZXNvZnQiOiBgJHt1dGlscy5HZXRVc2VyRHROb3coInl5eXktTU0tZGQiKX0gMDA6MDA6MDBgLA0KICAgICAgICAiaG9yYV9kb19yZXRvcm5vX211bGVzb2Z0IjogKCgpID0+IHsNCiAgICAgICAgICAgIGxldCBkYXRlID0gbmV3IERhdGUodXRpbHMuR2V0VXNlckR0Tm93KCJ5eXl5LU1NLWRkIEhIOm1tOnNzIikpOw0KICAgICAgICAgICAgbGV0IGhvcmFzID0gKGRhdGUuZ2V0SG91cnMoKSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAwKSAtIDI7IC8vSG9yYSBkYSBjb2zDtG1iaWEgDQogICAgICAgICAgICBsZXQgbWludXRvcyA9IChkYXRlLmdldE1pbnV0ZXMoKSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCAwKTsNCiAgICAgICAgICAgIHJldHVybiBgJHtob3Jhc306JHttaW51dG9zfWA7DQogICAgICAgIH0pKCksDQogICAgICAgICJhcnF1aXZvX2RlX3JldG9ybm9fbXVsZXNvZnQiOiAoKCkgPT4gew0KICAgICAgICAgICAgbGV0IGZpbGVCYXNlNjQgPSBnZXRTdHJGcm9tQjY0KHsgInRleHQiOiBkYXRhLmRvY3VtZW50LkJhc2U2NEVuY29kZWRGaWxlIH0pOw0KDQogICAgICAgICAgICBsZXQgZmlsZVBhdGggPSBmaWxldXRpbHMuQ3JlYXRlRmlsZShmaWxlQmFzZTY0LCAiLmNzdiIsIGRhdGEuZG9jdW1lbnQuZmlsZU5hbWUuc3BsaXQoIi4iKVswXSk7DQogICAgICAgICAgICBsZXQgZmlsZVVSTCA9IGZpbGV1dGlscy5VcGxvYWRGaWxlKGZpbGVQYXRoKTsNCg0KICAgICAgICAgICAgcmV0dXJuIFt7DQogICAgICAgICAgICAgICAgIlVybCI6IGZpbGVVUkwsDQogICAgICAgICAgICAgICAgIlVybEF6dXJlIjogZmlsZVVSTCwNCiAgICAgICAgICAgICAgICAiTmFtZSI6IGRhdGEuZG9jdW1lbnQuZmlsZU5hbWUNCiAgICAgICAgICAgIH1dOw0KICAgICAgICB9KSgpLA0KICAgICAgICAiYXJxdWl2b190eHRfcmV0b3Jub19tdWxlc29mdCI6IGdldFN0ckZyb21CNjQoeyAidGV4dCI6IGRhdGEuZG9jdW1lbnQuQmFzZTY0RW5jb2RlZEZpbGUgfSkNCiAgICB9Ow0KDQogICAgb25lcmd5LmxvZyhKU09OLnN0cmluZ2lmeSh7DQogICAgICAgICJ0eXBlIjogIkFQSSAtIFJldG9ybm8gTXVsZVNvZnQiLA0KICAgICAgICAib3JpZ2VtIjogIkxvdGUgZGUgSW50ZWdyYcOnw6NvIE9yYWNsZTpBUEkgUmV0b3JubyBNdWxlU29mdDppbml0IiwNCiAgICAgICAgImRhdGEiOiBkYXRhDQogICAgfSkpOw0KDQogICAgLyphd2FpdCovIGVudmlhclBhcmFQcm9jZXNzbyh7IC4uLmRhdGEsIC4uLnJlc3VsdCB9KTsNCg0KICAgIHJldHVybiBTZXRPYmplY3RSZXNwb25zZShmYWxzZSwgcmVzdWx0LCBmYWxzZSk7DQp9DQoNCmZ1bmN0aW9uIGluaXRCZWZvcmUoanNvbikgew0KICAgIHJldHVybiB0cnVlOw0KfQ0KDQpmdW5jdGlvbiBpbml0RGVsZXRlKGpzb24pIHsNCiAgICAvL3JldHVybiB0cnVlOw0KfQ0KDQpmdW5jdGlvbiBTZXRPYmplY3RSZXNwb25zZShjb25kLCBqc29uLCBXYWl0aW5nV2ViSG9vaykgew0KICAgIGlmIChXYWl0aW5nV2ViSG9vayA9PT0gdW5kZWZpbmVkKSB7DQogICAgICAgIFdhaXRpbmdXZWJIb29rID0gZmFsc2U7DQogICAgfQ0KICAgIHZhciBvYmogPSB7DQogICAgICAgICdjb25kJzogY29uZCwNCiAgICAgICAgJ1dhaXRpbmdXZWJIb29rJzogV2FpdGluZ1dlYkhvb2ssDQogICAgfTsNCiAgICBpZiAoanNvbiAmJiBPYmplY3Qua2V5cyhqc29uKS5sZW5ndGggPiAwKSB7DQogICAgICAgIG9iai5qc29uID0gSlNPTi5zdHJpbmdpZnkoanNvbik7DQogICAgfQ0KDQogICAgcmV0dXJuIG9iajsNCn0NCg0KY29uc3QgZW52aWFyUGFyYVByb2Nlc3NvID0gLyphc3luYyovIChkYXRhKSA9PiB7DQogICAgbGV0IHByb2Nlc3NvSUQgPSAiMGJiZDMzYjUtYWQ1MC00MDQ3LTgzYzEtMGU4ZGIwZGNmNjMyIjsgLyogTG90ZSBkZSBJbnRlZ3Jhw6fDo28gT3JhY2xlOkluw61jaW8gKi8NCiAgICBsZXQgUG9zdEluZm8gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpKTsNCiAgICBQb3N0SW5mby5oYXNPd25Qcm9wZXJ0eSgib25lVGVtcGxhdGVUaXRsZSIpID8gZGVsZXRlIFBvc3RJbmZvLm9uZVRlbXBsYXRlVGl0bGUgOiAiIjsNCiAgICBQb3N0SW5mby5oYXNPd25Qcm9wZXJ0eSgiYXNzX2lkIikgPyBkZWxldGUgUG9zdEluZm8uYXNzX2lkIDogIiI7DQogICAgUG9zdEluZm8uaGFzT3duUHJvcGVydHkoImFzc2lkIikgPyBkZWxldGUgUG9zdEluZm8uYXNzaWQgOiAiIjsNCiAgICBQb3N0SW5mby5oYXNPd25Qcm9wZXJ0eSgiZmVkaWQiKSA/IGRlbGV0ZSBQb3N0SW5mby5mZWRpZCA6ICIiOw0KICAgIFBvc3RJbmZvLmhhc093blByb3BlcnR5KCJ1c3JpZCIpID8gZGVsZXRlIFBvc3RJbmZvLnVzcmlkIDogIiI7DQogICAgUG9zdEluZm8uaGFzT3duUHJvcGVydHkoImZkdGlkIikgPyBkZWxldGUgUG9zdEluZm8uZmR0aWQgOiAiIjsNCiAgICBQb3N0SW5mby5oYXNPd25Qcm9wZXJ0eSgiZW1haWwiKSA/IGRlbGV0ZSBQb3N0SW5mby5lbWFpbCA6ICIiOw0KICAgIFBvc3RJbmZvLmhhc093blByb3BlcnR5KCJvbmVyZ3lfcm9saWQiKSA/IGRlbGV0ZSBQb3N0SW5mby5vbmVyZ3lfcm9saWQgOiAiIjsNCiAgICBQb3N0SW5mby5oYXNPd25Qcm9wZXJ0eSgidGltZXpvbmUiKSA/IGRlbGV0ZSBQb3N0SW5mby50aW1lem9uZSA6ICIiOw0KICAgIFBvc3RJbmZvLmhhc093blByb3BlcnR5KCJvbmVyZ3lfanNfY3R4IikgPyBkZWxldGUgUG9zdEluZm8ub25lcmd5X2pzX2N0eCA6ICIiOw0KICAgIFBvc3RJbmZvID0gew0KICAgICAgICAibXVsZXNvZnQiOiB7DQogICAgICAgICAgICAuLi5Qb3N0SW5mbw0KICAgICAgICB9DQogICAgfTsNCiAgICBQb3N0SW5mby5vbmVyZ3lfanNfY3R4X09SSUdJTkFMID0gZGF0YS5vbmVyZ3lfanNfY3R4Ow0KDQogICAgLyphd2FpdCovIHNlbmRJdGVtVG9PbmVyZ3kocHJvY2Vzc29JRCwgZGF0YS5vbmVyZ3lfanNfY3R4LnVzcmlkLCBkYXRhLm9uZXJneV9qc19jdHguYXNzaWQsIFBvc3RJbmZvKTsNCn07DQoNCmNvbnN0IHNlbmRJdGVtVG9PbmVyZ3kgPSAvKmFzeW5jKi8gKHRlbXBsYXRlaWQsIHVzcmlkLCBhc3NpZCwgZGF0YSkgPT4gew0KICAgIGxldCBvbmVyZ3lTYXZlRGF0YSA9IHsNCiAgICAgICAgZmR0aWQ6IHRlbXBsYXRlaWQsDQogICAgICAgIGFzc2lkOiBhc3NpZCwNCiAgICAgICAgdXNyaWQ6IHVzcmlkLA0KICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKQ0KICAgIH07DQogICAgcmV0dXJuIC8qYXdhaXQqLyBvbmVyZ3lfc2F2ZShvbmVyZ3lTYXZlRGF0YSk7DQp9Ow==" }, { "name": "Integração contasAPagar.js", "isDirectory": false, "__KEY__": "3ccfcc34-9bd7-520d-c787-2912019533c5", "size": 20968, "dateModified": "2022-06-17T15:49:06.000Z", "content": "" }]

export { ListdxComponentValue, IdxComponentValue, TESTE_AAA }

